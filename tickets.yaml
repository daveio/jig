# Linear Tickets Configuration for jig CLI
# This file defines all tickets for the jig CLI implementation project

metadata:
  team: jig
  labels:
    - name: infrastructure
      description: Core infrastructure and foundational work
      color: "#5E6AD2"
    - name: cli-command
      description: CLI command implementation
      color: "#4CB782"
    - name: api-integration
      description: External API integration work
      color: "#F2994A"
    - name: ai-powered
      description: AI/ML powered features
      color: "#26B5CE"
    - name: shell-integration
      description: Shell and terminal integration
      color: "#8B5CF6"
    - name: testing
      description: Testing and quality assurance
      color: "#6B7280"
    - name: documentation
      description: Documentation and guides
      color: "#10B981"
    - name: security
      description: Security-related features
      color: "#EF4444"
    - name: performance
      description: Performance optimization
      color: "#F59E0B"

# Phase-level epics
epics:
  - id: phase-1
    title: "Phase 1: Core Infrastructure & Project Setup"
    priority: 1 # High priority
    labels:
      - infrastructure
    description: |
      ## ðŸ©» Summary

      Establish the foundational components of the `jig` CLI application, including command-line argument parsing, configuration management, and essential shared utilities that all other commands will rely on.

      ## ðŸ§µ It's Done Whenâ€¦

      - Main CLI structure is set up with all global options working
      - Configuration loading from `~/.jig.yaml` and `~/.jig.secret.yaml` is functional
      - Hierarchical secret resolution (key/file/env) is implemented
      - Core utilities module with Git abstraction and error handling is complete
      - All components have proper error propagation and logging

      ## ðŸ“¦ Related Material

      - [README.md - Configuration section](https://github.com/daveio/jig#configuration)
      - [PLAN.md - Phase 1 details](https://github.com/daveio/jig#phase-1)

      ## ðŸ«§ Further Detail

      This phase lays the groundwork for all future development. Key technologies:
      - clap for CLI parsing with abbreviation support
      - saphyr and serde for YAML configuration
      - anyhow for error handling
      - tracing for logging

      Duration: 2 weeks

  - id: phase-2
    title: "Phase 2: Foundational Command Groups"
    priority: 1 # High priority
    labels:
      - cli-command
      - security
    description: |
      ## ðŸ©» Summary

      Implement the core, self-contained utility commands that provide immediate value and do not have significant external dependencies. This includes crypto, generate, network, and TLS commands.

      ## ðŸ§µ It's Done Whenâ€¦

      - All crypto commands (encrypt/decrypt/public) work with age encryption
      - Generate commands produce secure hex, passwords, keys, and JWTs
      - Network DNS commands handle flush/lookup/DNSSEC
      - TLS commands retrieve certificates and list ciphers
      - All commands respect global options (`--json`, `--quiet`, etc.)

      ## ðŸ“¦ Related Material

      - [README.md - Command Reference](https://github.com/daveio/jig#command-reference)
      - [PLAN.md - Phase 2 details](https://github.com/daveio/jig#phase-2)

      ## ðŸ«§ Further Detail

      These commands form the utility belt of `jig`, providing everyday tools for developers:
      - Age encryption for secure file handling
      - Password generation with entropy validation (zxcvbn)
      - JWT generation with configurable claims
      - DNS and TLS utilities for network debugging

      Duration: 3 weeks

  - id: phase-3
    title: "Phase 3: Project & Git Management"
    priority: 2 # Medium priority
    labels:
      - cli-command
      - Development
    description: |
      ## ðŸ©» Summary

      Build the commands for managing projects and interacting with Git repositories. These involve filesystem manipulation, template processing, and external process execution.

      ## ðŸ§µ It's Done Whenâ€¦

      - Project templates can be listed, created, and updated
      - New projects can be scaffolded from Tera templates
      - Git operations work with both CLI and gix library
      - Binary release management is functional
      - Batch repository operations (yank) work correctly

      ## ðŸ“¦ Related Material

      - [README.md - jig project commands](https://github.com/daveio/jig#jig-project)
      - [README.md - jig git commands](https://github.com/daveio/jig#jig-git)

      ## ðŸ«§ Further Detail

      Key features include:
      - Tera template engine integration
      - Git abstraction layer (CLI vs gix)
      - GitHub API integration for releases
      - `.jig.yaml` tracking for project updates
      - Binary metadata storage in YAML

      Duration: 3 weeks

  - id: phase-4
    title: "Phase 4: External API Integration"
    priority: 2 # Medium priority
    labels:
      - api-integration
    description: |
      ## ðŸ©» Summary

      Implement features that rely on external APIs including dave.io, Domainr, and RDAP. This phase can run in parallel with Phase 3.

      ## ðŸ§µ It's Done Whenâ€¦

      - Base dave.io API client is implemented with retry logic
      - All dave.io endpoints are accessible (ping, token, etc.)
      - Domain availability checking works via Domainr API
      - Domain expiry and nameserver lookup work via RDAP
      - Proper error handling and caching are in place

      ## ðŸ“¦ Related Material

      - [README.md - jig api commands](https://github.com/daveio/jig#jig-api)
      - [README.md - jig domain commands](https://github.com/daveio/jig#jig-domain)

      ## ðŸ«§ Further Detail

      API integrations include:
      - dave.io API for various services
      - Domainr API for domain availability
      - RDAP for domain information
      - Cloudflare TLD filtering for domain checks

      Duration: 2 weeks

  - id: phase-5
    title: "Phase 5: AI-Powered Features"
    priority: 2 # Medium priority
    labels:
      - ai-powered
      - api-integration
    description: |
      ## ðŸ©» Summary

      Integrate with AI services (Claude) to deliver intelligent automation features for image processing, commit messages, and ticket management.

      ## ðŸ§µ It's Done Whenâ€¦

      - Image preparation utility optimizes images for Claude
      - AI image renaming generates descriptive filenames
      - Git commits get AI-generated conventional messages
      - Image alt text and optimization work via API
      - Ticket title/description generation is functional

      ## ðŸ“¦ Related Material

      - [README.md - jig ai commands](https://github.com/daveio/jig#jig-ai)
      - Technical utilities documentation

      ## ðŸ«§ Further Detail

      Key components:
      - `prepare_image_for_claude` utility (resize, WebP, compression)
      - `ask_claude` helper for API communication
      - Conventional commit format generation
      - Rate limiting and quota management

      Duration: 2 weeks

  - id: phase-6
    title: "Phase 6: Advanced Shell & System Integration"
    priority: 2 # Medium priority
    labels:
      - shell-integration
      - infrastructure
    description: |
      ## ðŸ©» Summary

      Implement features requiring deep integration with the user's shell and local environment, including initialization, workspace management, and terminal utilities.

      ## ðŸ§µ It's Done Whenâ€¦

      - `jig init` creates full environment setup
      - Workspace switching manages state transitions correctly
      - Shell hooks work for fish, bash, and zsh
      - Terminal utilities display system info and XKCD comics
      - Environment variable isolation is functional

      ## ðŸ“¦ Related Material

      - [README.md - jig init](https://github.com/daveio/jig#jig-init)
      - [README.md - jig workspace](https://github.com/daveio/jig#jig-workspace)

      ## ðŸ«§ Further Detail

      Complex shell integration features:
      - Multi-shell support (fish, bash, zsh)
      - Workspace state management
      - Environment variable handling
      - Terminal capability detection
      - viuer for terminal graphics

      Duration: 2 weeks

  - id: phase-7
    title: "Phase 7: Polish & Easter Eggs"
    priority: 3 # Low priority
    labels:
      - Enhancement
    description: |
      ## ðŸ©» Summary

      Add features that enhance the user experience but are not critical to core functionality, including the hidden `jig dance` command with terminal animations.

      ## ðŸ§µ It's Done Whenâ€¦

      - `jig dance` displays animated terminal effects
      - Multiple animation modes are available
      - Command is hidden from `--help` output
      - Clean interrupt handling works
      - All effects libraries are integrated

      ## ðŸ“¦ Related Material

      - [README.md - Easter Egg Implementation](https://github.com/daveio/jig#easter-egg-implementation)

      ## ðŸ«§ Further Detail

      Terminal effects libraries:
      - tachyonfx for shader-like effects
      - tui-rain for atmospheric effects
      - firework-rs for ASCII animations
      - rascii_art for image conversion
      - spinoff for loading indicators

      Duration: 1 week

  - id: phase-8
    title: "Phase 8: Future & Protocol Implementation"
    priority: 3 # Low priority
    labels:
      - Feature
      - Planning
    description: |
      ## ðŸ©» Summary

      Implement forward-looking features planned for after the initial release, primarily the Model Context Protocol (MCP) server for AI agent integration.

      ## ðŸ§µ It's Done Whenâ€¦

      - MCP server is implemented using rmcp
      - Protocol is documented for AI agents
      - Security boundaries are established
      - Command filtering and permissions work
      - Integration examples are provided

      ## ðŸ“¦ Related Material

      - [README.md - jig mcp](https://github.com/daveio/jig#jig-mcp)
      - Future roadmap documentation

      ## ðŸ«§ Further Detail

      Post-v1.0 feature for AI integration:
      - stdio MCP server implementation
      - Command exposure to AI agents
      - Security and permission system
      - Future: WASM compilation, remote MCP

      Duration: 1 week (initial implementation)

  - id: phase-9
    title: "Phase 9: Testing, Documentation & Release"
    priority: 1 # High priority
    labels:
      - testing
      - documentation
      - Deployment
    description: |
      ## ðŸ©» Summary

      Finalize the application for public release with comprehensive testing, CI/CD setup, documentation updates, and distribution packaging.

      ## ðŸ§µ It's Done Whenâ€¦

      - 80%+ test coverage achieved
      - CI/CD pipeline runs on all commits
      - Cross-platform binaries build successfully
      - Documentation is accurate and complete
      - Homebrew formula and cargo package work

      ## ðŸ“¦ Related Material

      - [PLAN.md - Success Metrics](https://github.com/daveio/jig#success-metrics)
      - Release checklist

      ## ðŸ«§ Further Detail

      Release preparation:
      - Unit and integration tests
      - Property-based testing
      - GitHub Actions workflows
      - Man page generation
      - Binary signing
      - < 100ms startup time
      - < 5MB compressed binary

      Duration: 2 weeks (continuous throughout)

# Feature-level tickets
features:
  # Phase 1 Features
  - id: feat-cli-framework
    epic_id: phase-1
    title: CLI Framework Setup
    estimate: 8
    priority: 1
    labels:
      - infrastructure
    description: |
      ## ðŸ©» Summary

      Set up the main `jig` command structure using clap with support for subcommands, global options, and command abbreviation.

      ## ðŸ§µ It's Done Whenâ€¦

      - Main CLI entry point is created with clap
      - All global options are implemented and tested
      - Command abbreviation works (e.g., `jig gen` â†’ `jig generate`)
      - Help text is comprehensive and well-formatted
      - Version information is correctly displayed

      ## ðŸ“¦ Related Material

      - clap documentation
      - Global options specification in README

      ## ðŸ«§ Further Detail

      Global options to implement:
      - `--version`/`-V`: Display version
      - `--help`/`-h`: Show help
      - `--yes`/`-y`: Skip confirmations
      - `--json`/`-j`: JSON output
      - `--verbose`/`-v`: Detailed output
      - `--quiet`/`-q`: Minimal output
      - `--silent`/`-s`: No output

  - id: feat-config-mgmt
    epic_id: phase-1
    title: Configuration Management
    estimate: 13
    priority: 1
    labels:
      - infrastructure
    description: |
      ## ðŸ©» Summary

      Implement comprehensive configuration loading and management using saphyr and serde, including secret resolution logic.

      ## ðŸ§µ It's Done Whenâ€¦

      - `~/.jig.yaml` loads correctly
      - `~/.jig.secret.yaml` merges properly
      - Secret resolution follows priority: env â†’ file â†’ key
      - Configuration validation catches errors
      - Default values are applied correctly

      ## ðŸ“¦ Related Material

      - Configuration reference in README
      - saphyr/serde documentation

      ## ðŸ«§ Further Detail

      Complex secret resolution logic for:
      - `secret.main` (encryption key)
      - `secret.jwt` (JWT signing)
      - `secret.api.*` (API keys)

      Support for order configuration and fallbacks.

  - id: feat-core-utils
    epic_id: phase-1
    title: Core Utilities Module
    estimate: 8
    priority: 1
    labels:
      - infrastructure
    description: |
      ## ðŸ©» Summary

      Create the shared utilities module containing common functionality used across all commands.

      ## ðŸ§µ It's Done Whenâ€¦

      - Git abstraction layer switches between CLI and gix
      - Error handling is consistent with anyhow
      - Logging uses tracing effectively
      - `resolve_github_username` works with all methods
      - Output formatting supports JSON and human-readable

      ## ðŸ“¦ Related Material

      - Technical implementation notes
      - Git abstraction design

      ## ðŸ«§ Further Detail

      Key utilities:
      - Git operations abstraction
      - GitHub username resolution
      - JSON formatting with `stringify_pretty`
      - Common error types

  # Phase 2 Features
  - id: feat-crypto-cmds
    epic_id: phase-2
    title: "`jig crypto` commands"
    estimate: 8
    priority: 1
    labels:
      - cli-command
      - security
    description: |
      ## ðŸ©» Summary

      Implement age encryption/decryption commands with support for files and stdin/stdout.

      ## ðŸ§µ It's Done Whenâ€¦

      - `encrypt` command works with files and stdin
      - `decrypt` command works with files and stdin
      - `public` command shows recipient from private key
      - Binary data is handled correctly
      - Key loading follows configuration hierarchy

      ## ðŸ“¦ Related Material

      - age encryption documentation
      - Crypto command specifications

      ## ðŸ«§ Further Detail

      Features:
      - Input/output flexibility (files or streams)
      - Key override with `--key` option
      - Binary-safe operations
      - Clear error messages for invalid keys

  - id: feat-generate-cmds
    epic_id: phase-2
    title: "`jig generate` commands"
    estimate: 13
    priority: 1
    labels:
      - cli-command
      - security
    description: |
      ## ðŸ©» Summary

      Implement secure generation utilities for hex strings, passwords, cryptographic keys, and JWTs.

      ## ðŸ§µ It's Done Whenâ€¦

      - `hex` generates cryptographically secure strings
      - `password` includes entropy validation with zxcvbn
      - xkcd mode generates memorable passphrases
      - key generation supports age and WireGuard
      - JWT generation includes claims and expiry
      - Deterministic generation works with `--keyed`/`--seed`

      ## ðŸ“¦ Related Material

      - Generation command specifications
      - Password entropy requirements

      ## ðŸ«§ Further Detail

      Complex features:
      - Character set management for passwords
      - Emoji support in passwords
      - JWT claim handling
      - Minimum entropy score enforcement

  - id: feat-network-cmds
    epic_id: phase-2
    title: "`jig network` commands"
    estimate: 8
    priority: 1
    labels:
      - cli-command
    description: |
      ## ðŸ©» Summary

      Implement network utilities for DNS operations including cache flushing, lookups, and DNSSEC validation.

      ## ðŸ§µ It's Done Whenâ€¦

      - DNS flush works on macOS, Linux, and Windows
      - DNS lookup supports custom nameservers
      - DNSSEC validation checks work correctly
      - Root nameserver queries are supported
      - Timeout handling prevents hangs

      ## ðŸ“¦ Related Material

      - DNS command specifications
      - OS-specific flush commands

      ## ðŸ«§ Further Detail

      OS-specific implementations:
      - macOS: `dscacheutil -flushcache`
      - Linux: `systemd-resolve --flush-caches`
      - Windows: `ipconfig /flushdns`

  - id: feat-tls-cmds
    epic_id: phase-2
    title: "`jig tls` commands"
    estimate: 5
    priority: 1
    labels:
      - cli-command
      - security
    description: |
      ## ðŸ©» Summary

      Implement TLS utilities for certificate retrieval and cipher suite analysis.

      ## ðŸ§µ It's Done Whenâ€¦

      - Certificate retrieval works for any TLS host
      - Full certificate chain can be retrieved
      - Cipher suite listing shows all supported ciphers
      - Custom ports are supported
      - Output is in standard PEM format

      ## ðŸ“¦ Related Material

      - TLS command specifications
      - Certificate format standards

      ## ðŸ«§ Further Detail

      Features:
      - Default port 443 with override
      - Strength ratings for ciphers
      - Timeout handling for connections

  # Phase 3 Features
  - id: feat-template-system
    epic_id: phase-3
    title: Project Template System
    estimate: 13
    priority: 2
    labels:
      - cli-command
      - Development
    description: |
      ## ðŸ©» Summary

      Build the template management system for project scaffolding with Tera template engine support.

      ## ðŸ§µ It's Done Whenâ€¦

      - Templates can be listed from local cache
      - Template updates pull from Git repository
      - New templates can be created with metadata
      - `_shared` template support works
      - Tera processing handles all syntax

      ## ðŸ“¦ Related Material

      - Template system design
      - Tera template documentation

      ## ðŸ«§ Further Detail

      Key features:
      - `.jig.template.yaml` metadata
      - Shared template inheritance
      - Git-based template distribution
      - Template context variables

  - id: feat-project-cmds
    epic_id: phase-3
    title: Project Management Commands
    estimate: 13
    priority: 2
    labels:
      - cli-command
      - Development
    description: |
      ## ðŸ©» Summary

      Implement project scaffolding, updating, dependency management, and Dependabot configuration.

      ## ðŸ§µ It's Done Whenâ€¦

      - New projects scaffold from templates
      - Updates show diffs and preserve changes
      - Dependency bumping works for all ecosystems
      - Dependabot YAML generates correctly
      - `.jig.yaml` tracking works properly

      ## ðŸ“¦ Related Material

      - Project command specifications
      - Dependabot configuration format

      ## ðŸ«§ Further Detail

      Ecosystem support:
      - `Cargo.toml` (Rust)
      - `package.json` (Node.js)
      - GitHub Actions YAML
      - Automatic ecosystem detection

  - id: feat-git-integration
    epic_id: phase-3
    title: Git Integration Commands
    estimate: 13
    priority: 2
    labels:
      - cli-command
      - Development
    description: |
      ## ðŸ©» Summary

      Implement Git and GitHub integration features including simplified cloning, secret management, and batch operations.

      ## ðŸ§µ It's Done Whenâ€¦

      - Clone works with username/repo syntax
      - Latest commit retrieval works via API
      - GitHub secrets can be set via API
      - Yank updates all repos in a directory
      - Git abstraction layer works correctly

      ## ðŸ“¦ Related Material

      - Git command specifications
      - GitHub API documentation

      ## ðŸ«§ Further Detail

      Features:
      - SSH agent support detection
      - Progress indicators for long operations
      - Batch operation parallelization
      - Error recovery in yank

  - id: feat-binary-mgmt
    epic_id: phase-3
    title: Binary Release Management
    estimate: 8
    priority: 2
    labels:
      - cli-command
      - Development
    description: |
      ## ðŸ©» Summary

      Implement GitHub binary release management with automatic platform detection and updates.

      ## ðŸ§µ It's Done Whenâ€¦

      - Binaries download from GitHub releases
      - Platform/architecture detection works
      - Update checks compare hashes
      - Metadata tracks installations
      - PATH integration via shell hook works

      ## ðŸ“¦ Related Material

      - Binary management specifications
      - GitHub releases API

      ## ðŸ«§ Further Detail

      Storage locations:
      - `~/.local/share/jig/binaries.yaml` (metadata)
      - `~/.local/share/jig/bin` (executables)

      Hash verification for updates.

  # Phase 4 Features
  - id: feat-dave-api
    epic_id: phase-4
    title: Dave.io API Client
    estimate: 8
    priority: 2
    labels:
      - api-integration
    description: |
      ## ðŸ©» Summary

      Create the base API client for dave.io with authentication, retry logic, and error handling.

      ## ðŸ§µ It's Done Whenâ€¦

      - Base client handles authentication headers
      - Retry logic handles transient failures
      - All endpoints are accessible
      - JSON responses parse correctly
      - Rate limiting is respected

      ## ðŸ“¦ Related Material

      - dave.io API documentation
      - API client best practices

      ## ðŸ«§ Further Detail

      Endpoints to implement:
      - `/api/ping`
      - `/api/tokens/*`
      - `/api/images/*`
      - `/api/tickets/*`
      - `/api/ai/*`

  - id: feat-domain-cmds
    epic_id: phase-4
    title: Domain Management Commands
    estimate: 8
    priority: 2
    labels:
      - cli-command
      - api-integration
    description: |
      ## ðŸ©» Summary

      Implement domain availability checking, expiry monitoring, and nameserver lookups using external APIs.

      ## ðŸ§µ It's Done Whenâ€¦

      - Domainr API checks availability
      - Results filter to Cloudflare TLDs
      - RDAP provides expiry information
      - Nameserver lookups fall back to DNS
      - API responses are cached appropriately

      ## ðŸ“¦ Related Material

      - Domain command specifications
      - Domainr API documentation
      - RDAP protocol specification

      ## ðŸ«§ Further Detail

      Cloudflare TLD list is hardcoded.
      Fallback strategies for RDAP failures.

  # Phase 5 Features
  - id: feat-ai-utils
    epic_id: phase-5
    title: AI Integration Utilities
    estimate: 8
    priority: 2
    labels:
      - ai-powered
      - infrastructure
    description: |
      ## ðŸ©» Summary

      Implement shared utilities for AI integration including image preparation and Claude API communication.

      ## ðŸ§µ It's Done Whenâ€¦

      - Image resizing keeps under 2048px
      - WebP conversion with compression works
      - Final images stay under 5MB
      - `ask_claude` handles all response types
      - Retry logic handles API failures

      ## ðŸ“¦ Related Material

      - Claude API requirements
      - Image optimization strategies

      ## ðŸ«§ Further Detail

      Compression levels:
      1. Lossless
      2. 90% quality
      3. 75% quality
      4. 50% quality
      5. 25% quality

  - id: feat-ai-cmds
    epic_id: phase-5
    title: AI-Powered Commands
    estimate: 13
    priority: 2
    labels:
      - cli-command
      - ai-powered
    description: |
      ## ðŸ©» Summary

      Implement AI-powered features for image renaming, commit messages, alt text, and ticket management.

      ## ðŸ§µ It's Done Whenâ€¦

      - Image renaming generates descriptive names
      - Commit messages follow conventional format
      - Alt text generation works via API
      - Ticket titles and descriptions generate
      - Rate limiting prevents quota exhaustion

      ## ðŸ“¦ Related Material

      - AI command specifications
      - Conventional commit format

      ## ðŸ«§ Further Detail

      Filename format: `descriptive_words-YYYYMMDD-HHMMss.ext`
      Commit format: emoji + type + description

  # Phase 6 Features
  - id: feat-init-system
    epic_id: phase-6
    title: Initialization System
    estimate: 8
    priority: 2
    labels:
      - shell-integration
      - infrastructure
    description: |
      ## ðŸ©» Summary

      Implement the full initialization flow for setting up `jig` environment and shell integration.

      ## ðŸ§µ It's Done Whenâ€¦

      - Directory structure creates correctly
      - Template repository clones successfully
      - Configuration generates with keys
      - Shell detection identifies current shell
      - Installation instructions are accurate

      ## ðŸ“¦ Related Material

      - Initialization flow documentation
      - Shell plugin installation guides

      ## ðŸ«§ Further Detail

      Directories to create:
      - `~/.local/share/jig`
      - `~/.local/share/jig/bin`
      - `~/.local/share/jig/templates`

  - id: feat-workspace-mgmt
    epic_id: phase-6
    title: Workspace Management
    estimate: 13
    priority: 2
    labels:
      - cli-command
      - shell-integration
    description: |
      ## ðŸ©» Summary

      Implement workspace switching with state management, environment variables, and command execution.

      ## ðŸ§µ It's Done Whenâ€¦

      - Workspace listing shows all configurations
      - Switching runs up/down commands correctly
      - Environment variables isolate properly
      - Shell hooks integrate seamlessly
      - All shells (fish, bash, zsh) work

      ## ðŸ“¦ Related Material

      - Workspace specifications
      - Shell hook documentation

      ## ðŸ«§ Further Detail

      State transition flow:
      1. before-down hooks
      2. Old workspace down
      3. after-down hooks
      4. before-up hooks
      5. New workspace up
      6. after-up hooks

  - id: feat-terminal-utils
    epic_id: phase-6
    title: Terminal Utilities
    estimate: 5
    priority: 2
    labels:
      - cli-command
    description: |
      ## ðŸ©» Summary

      Implement terminal visualization utilities for system information and XKCD comics.

      ## ðŸ§µ It's Done Whenâ€¦

      - System info displays as gauges
      - Terminal capabilities are detected
      - Images resize for terminal display
      - XKCD comics render correctly
      - Multiple protocols supported (sixel, kitty, iTerm2)

      ## ðŸ“¦ Related Material

      - Terminal command specifications
      - viuer documentation

      ## ðŸ«§ Further Detail

      System metrics:
      - CPU usage
      - Memory usage
      - Disk usage

      Fallback rendering modes for compatibility.

  # Phase 7 Features
  - id: feat-easter-eggs
    epic_id: phase-7
    title: Easter Egg Implementation
    estimate: 5
    priority: 3
    labels:
      - Enhancement
    description: |
      ## ðŸ©» Summary

      Implement the hidden `jig dance` command with advanced terminal animations and effects.

      ## ðŸ§µ It's Done Whenâ€¦

      - All effects libraries integrate properly
      - Animation sequences run smoothly
      - Command is hidden from help
      - Interrupt handling exits cleanly
      - Multiple animation modes available

      ## ðŸ“¦ Related Material

      - Easter egg specifications
      - Terminal effects libraries

      ## ðŸ«§ Further Detail

      Effects to implement:
      - Matrix rain
      - Fireworks
      - ASCII art conversion
      - Typewriter effects
      - Loading spinners

  # Phase 8 Features
  - id: feat-mcp-server
    epic_id: phase-8
    title: Model Context Protocol Server
    estimate: 8
    priority: 3
    labels:
      - Feature
      - api-integration
    description: |
      ## ðŸ©» Summary

      Implement the MCP server for AI agent integration using rmcp library.

      ## ðŸ§µ It's Done Whenâ€¦

      - stdio MCP server responds to requests
      - Commands are exposed to AI agents
      - Security boundaries prevent abuse
      - Permission system filters commands
      - Protocol documentation is complete

      ## ðŸ“¦ Related Material

      - MCP specifications
      - rmcp library documentation

      ## ðŸ«§ Further Detail

      Post-v1.0 feature.
      Future: WASM compilation, remote MCP.

  # Phase 9 Features
  - id: feat-test-suite
    epic_id: phase-9
    title: Comprehensive Test Suite
    estimate: 13
    priority: 1
    labels:
      - testing
    description: |
      ## ðŸ©» Summary

      Write comprehensive unit and integration tests achieving 80%+ coverage.

      ## ðŸ§µ It's Done Whenâ€¦

      - Unit tests cover all core logic
      - Integration tests validate CLI behavior
      - Property-based tests check generators
      - End-to-end scenarios pass
      - Coverage reports show 80%+

      ## ðŸ“¦ Related Material

      - Testing strategy documentation
      - Coverage requirements

      ## ðŸ«§ Further Detail

      Test categories:
      - Unit tests for utilities
      - Integration tests for commands
      - Property tests for generation
      - E2E tests for workflows

  - id: feat-cicd
    epic_id: phase-9
    title: CI/CD Pipeline
    estimate: 8
    priority: 1
    labels:
      - infrastructure
      - Deployment
    description: |
      ## ðŸ©» Summary

      Configure GitHub Actions for testing, building, and releasing cross-platform binaries.

      ## ðŸ§µ It's Done Whenâ€¦

      - Tests run on every push
      - rustfmt and clippy pass
      - Cross-platform builds work
      - Release automation publishes binaries
      - Dependencies scan for vulnerabilities

      ## ðŸ“¦ Related Material

      - GitHub Actions documentation
      - Release workflow examples

      ## ðŸ«§ Further Detail

      Platforms to support:
      - macOS (x64, ARM)
      - Linux (x64, ARM)
      - Windows (x64)

  - id: feat-documentation
    epic_id: phase-9
    title: Documentation & Help
    estimate: 8
    priority: 1
    labels:
      - documentation
    description: |
      ## ðŸ©» Summary

      Ensure all documentation is accurate, complete, and helpful for users.

      ## ðŸ§µ It's Done Whenâ€¦

      - README accurately reflects all features
      - `--help` messages are comprehensive
      - Man pages exist for all commands
      - Examples demonstrate usage
      - Troubleshooting guide helps users

      ## ðŸ“¦ Related Material

      - Documentation standards
      - Man page format

      ## ðŸ«§ Further Detail

      Documentation types:
      - Command reference
      - Configuration guide
      - Installation instructions
      - Troubleshooting tips

  - id: feat-packaging
    epic_id: phase-9
    title: Distribution Packaging
    estimate: 5
    priority: 1
    labels:
      - Deployment
    description: |
      ## ðŸ©» Summary

      Package `jig` for distribution via cargo, Homebrew, and direct download.

      ## ðŸ§µ It's Done Whenâ€¦

      - `cargo install` works correctly
      - Homebrew tap formula installs
      - Binary signing prevents warnings
      - Shell completions install properly
      - Docker image builds (optional)

      ## ðŸ“¦ Related Material

      - Packaging requirements
      - Distribution channels

      ## ðŸ«§ Further Detail

      Distribution methods:
      - crates.io (cargo)
      - Homebrew tap
      - GitHub releases
      - Docker Hub (optional)

# Individual task-level tickets
tasks:
  # Phase 1 Tasks
  - id: task-cli-main
    feature_id: feat-cli-framework
    title: Set up main `jig` command structure with clap
    estimate: 3
    priority: 1
    labels:
      - infrastructure
    description: |
      ## ðŸ©» Summary

      Create the main entry point for the `jig` CLI using clap, setting up the basic command structure and argument parsing.

      ## ðŸ§µ It's Done Whenâ€¦

      - `src/main.rs` contains clap app definition
      - Basic command structure matches README
      - Version information from `Cargo.toml`
      - Subcommand routing works

      ## ðŸ“¦ Related Material

      - clap v4 documentation
      - CLI structure diagram in README

  - id: task-global-opts
    feature_id: feat-cli-framework
    title: Implement global options
    estimate: 3
    priority: 1
    labels:
      - infrastructure
    description: |
      ## ðŸ©» Summary

      Implement all global command-line options that apply to every `jig` command.

      ## ðŸ§µ It's Done Whenâ€¦

      - `--version`/`-V` shows version
      - `--help`/`-h` displays help text
      - `--yes`/`-y` skips confirmations
      - `--json`/`-j` outputs JSON
      - `--verbose`/`-v` increases verbosity
      - `--quiet`/`-q` reduces output
      - `--silent`/`-s` suppresses all output
      - Conflicting options error appropriately

      ## ðŸ“¦ Related Material

      - Global options specification

  - id: task-cmd-abbrev
    feature_id: feat-cli-framework
    title: Configure command abbreviation support
    estimate: 2
    priority: 1
    labels:
      - infrastructure
    description: |
      ## ðŸ©» Summary

      Enable command abbreviation in clap so users can type shortened versions of commands.

      ## ðŸ§µ It's Done Whenâ€¦

      - `jig gen` resolves to `jig generate`
      - `jig proj` resolves to `jig project`
      - Ambiguous abbreviations show error
      - Help text mentions abbreviation support

  - id: task-config-load
    feature_id: feat-config-mgmt
    title: Implement `~/.jig.yaml` loading
    estimate: 3
    priority: 1
    labels:
      - infrastructure
    description: |
      ## ðŸ©» Summary

      Implement configuration file loading from `~/.jig.yaml` using saphyr and serde.

      ## ðŸ§µ It's Done Whenâ€¦

      - Configuration loads from `~/.jig.yaml`
      - Missing file handled gracefully
      - YAML parsing errors show helpful messages
      - Configuration struct matches README spec

      ## ðŸ“¦ Related Material

      - Configuration file format
      - saphyr documentation

  - id: task-secret-merge
    feature_id: feat-config-mgmt
    title: Implement secret file loading and merging
    estimate: 3
    priority: 1
    labels:
      - infrastructure
      - security
    description: |
      ## ðŸ©» Summary

      Implement loading and merging of `~/.jig.secret.yaml` with proper override behavior.

      ## ðŸ§µ It's Done Whenâ€¦

      - Secret file loads if exists
      - Secrets override main config
      - `secret.file` disables other secret config
      - Missing secret file handled gracefully

  - id: task-secret-resolution
    feature_id: feat-config-mgmt
    title: Implement hierarchical secret resolution
    estimate: 4
    priority: 1
    labels:
      - infrastructure
      - security
    description: |
      ## ðŸ©» Summary

      Implement the complex secret resolution logic supporting key, file, and env sources with configurable order.

      ## ðŸ§µ It's Done Whenâ€¦

      - env variables load correctly
      - file paths resolve and load
      - key values used directly
      - Order configuration respected
      - Fallback chain works correctly

      ## ðŸ«§ Further Detail

      Resolution priority:
      1. Check sources in configured order
      2. First non-empty value wins
      3. Support for `secret.main` and `secret.jwt`

  - id: task-config-validate
    feature_id: feat-config-mgmt
    title: Create configuration validation layer
    estimate: 3
    priority: 1
    labels:
      - infrastructure
    description: |
      ## ðŸ©» Summary

      Add validation to ensure configuration values are valid and provide helpful error messages.

      ## ðŸ§µ It's Done Whenâ€¦

      - Invalid values caught early
      - Error messages explain problems
      - Required fields validated
      - Type mismatches detected

  - id: task-git-abstraction
    feature_id: feat-core-utils
    title: Implement Git abstraction layer
    estimate: 3
    priority: 1
    labels:
      - infrastructure
    description: |
      ## ðŸ©» Summary

      Create abstraction layer allowing switching between git CLI and gix library based on configuration.

      ## ðŸ§µ It's Done Whenâ€¦

      - Interface supports common operations
      - CLI backend executes git commands
      - gix backend uses library calls
      - `git.internal` config switches backends

      ## ðŸ«§ Further Detail

      Operations to support:
      - clone
      - fetch
      - pull
      - status
      - add/commit

  - id: task-error-handling
    feature_id: feat-core-utils
    title: Implement error handling and logging strategy
    estimate: 2
    priority: 1
    labels:
      - infrastructure
    description: |
      ## ðŸ©» Summary

      Set up consistent error handling using anyhow and logging with tracing.

      ## ðŸ§µ It's Done Whenâ€¦

      - Error types defined or anyhow used
      - Context added to errors
      - Logging levels configured
      - Verbose flag increases detail

  - id: task-github-username
    feature_id: feat-core-utils
    title: Implement `resolve_github_username` utility
    estimate: 2
    priority: 1
    labels:
      - infrastructure
    description: |
      ## ðŸ©» Summary

      Create utility to determine current GitHub username from config or gh CLI.

      ## ðŸ§µ It's Done Whenâ€¦

      - Checks `git.user` config first
      - Falls back to `gh api user`
      - Returns error if unavailable
      - Caches result for performance

  - id: task-output-format
    feature_id: feat-core-utils
    title: Create output formatting utilities
    estimate: 2
    priority: 1
    labels:
      - infrastructure
    description: |
      ## ðŸ©» Summary

      Create utilities for formatting output as JSON or human-readable text based on `--json` flag.

      ## ðŸ§µ It's Done Whenâ€¦

      - JSON output uses `stringify_pretty`
      - Human output well-formatted
      - Global flag controls format
      - Consistent across commands

  # Phase 2 Tasks
  - id: task-age-encrypt
    feature_id: feat-crypto-cmds
    title: Implement age encryption command
    estimate: 3
    priority: 1
    labels:
      - cli-command
      - security
    description: |
      ## ðŸ©» Summary

      Implement the encrypt subcommand using age encryption for files and stdin.

      ## ðŸ§µ It's Done Whenâ€¦

      - Encrypts files with `-i` flag
      - Encrypts stdin without `-i`
      - Outputs to file with `-o`
      - Outputs to stdout without `-o`
      - Key override with `-k` works
      - Binary data handled correctly

  - id: task-age-decrypt
    feature_id: feat-crypto-cmds
    title: Implement age decryption command
    estimate: 3
    priority: 1
    labels:
      - cli-command
      - security
    description: |
      ## ðŸ©» Summary

      Implement the decrypt subcommand using age decryption for files and stdin.

      ## ðŸ§µ It's Done Whenâ€¦

      - Decrypts files with `-i` flag
      - Decrypts stdin without `-i`
      - Outputs to file with `-o`
      - Outputs to stdout without `-o`
      - Invalid keys show clear errors
      - Binary output preserved

  - id: task-age-public
    feature_id: feat-crypto-cmds
    title: Implement public key derivation
    estimate: 2
    priority: 1
    labels:
      - cli-command
      - security
    description: |
      ## ðŸ©» Summary

      Implement the public subcommand to show age recipient from private key.

      ## ðŸ§µ It's Done Whenâ€¦

      - Derives public key from private
      - Uses configured key by default
      - `-k` flag overrides key
      - Output suitable for sharing

  - id: task-gen-hex
    feature_id: feat-generate-cmds
    title: Implement hex generation
    estimate: 2
    priority: 1
    labels:
      - cli-command
    description: |
      ## ðŸ©» Summary

      Implement cryptographically secure hex string generation.

      ## ðŸ§µ It's Done Whenâ€¦

      - Generates specified bytes (default 16)
      - Uses secure random source
      - Outputs lowercase hex
      - Deterministic mode with `--keyed` works

  - id: task-gen-password
    feature_id: feat-generate-cmds
    title: Implement password generation with entropy
    estimate: 4
    priority: 1
    labels:
      - cli-command
      - security
    description: |
      ## ðŸ©» Summary

      Implement secure password generation with entropy validation using zxcvbn.

      ## ðŸ§µ It's Done Whenâ€¦

      - Generates passwords of specified length
      - Includes all character sets
      - Validates entropy (min score 3)
      - Regenerates if entropy too low
      - Shows security metrics

      ## ðŸ«§ Further Detail

      Character sets:
      - Uppercase A-Z
      - Lowercase a-z
      - Numbers 0-9
      - Symbols @%^-_,.~

  - id: task-gen-xkcd
    feature_id: feat-generate-cmds
    title: Implement xkcd password mode
    estimate: 2
    priority: 1
    labels:
      - cli-command
    description: |
      ## ðŸ©» Summary

      Implement memorable passphrase generation using word lists.

      ## ðŸ§µ It's Done Whenâ€¦

      - `-x` flag enables word mode
      - Length specifies word count
      - Words separated by hyphens
      - Entropy validation works
      - Word list comprehensive

  - id: task-gen-age-key
    feature_id: feat-generate-cmds
    title: Implement age key generation
    estimate: 2
    priority: 1
    labels:
      - cli-command
      - security
    description: |
      ## ðŸ©» Summary

      Implement age encryption key pair generation.

      ## ðŸ§µ It's Done Whenâ€¦

      - Generates valid age keys
      - Shows private and public
      - `-w` flag saves to config
      - Deterministic with `--keyed`

  - id: task-gen-wg-key
    feature_id: feat-generate-cmds
    title: Implement WireGuard key generation
    estimate: 2
    priority: 1
    labels:
      - cli-command
      - security
    description: |
      ## ðŸ©» Summary

      Implement WireGuard VPN key pair generation.

      ## ðŸ§µ It's Done Whenâ€¦

      - Generates valid WireGuard keys
      - Shows private and public
      - Keys work with wg tools

  - id: task-gen-jwt
    feature_id: feat-generate-cmds
    title: Implement JWT generation
    estimate: 3
    priority: 1
    labels:
      - cli-command
      - security
    description: |
      ## ðŸ©» Summary

      Implement JWT generation with claims and configurable signing.

      ## ðŸ§µ It's Done Whenâ€¦

      - `--subject` sets sub claim
      - `--description` adds human text
      - `--expiry` sets expiration
      - `--claim` adds custom claims
      - Secret loads from config
      - Multiple algorithms supported

  - id: task-dns-flush
    feature_id: feat-network-cmds
    title: Implement OS-aware DNS cache flush
    estimate: 3
    priority: 1
    labels:
      - cli-command
    description: |
      ## ðŸ©» Summary

      Implement DNS cache flushing with OS detection and appropriate commands.

      ## ðŸ§µ It's Done Whenâ€¦

      - Detects current OS
      - Runs correct flush command
      - Handles permission errors
      - Confirms success

      ## ðŸ«§ Further Detail

      Commands by OS:
      - macOS: `dscacheutil -flushcache`
      - Linux: `systemd-resolve --flush-caches`
      - Windows: `ipconfig /flushdns`

  - id: task-dns-lookup
    feature_id: feat-network-cmds
    title: Implement DNS lookup with custom servers
    estimate: 3
    priority: 1
    labels:
      - cli-command
    description: |
      ## ðŸ©» Summary

      Implement DNS query functionality with support for custom nameservers and record types.

      ## ðŸ§µ It's Done Whenâ€¦

      - Queries any record type
      - `--server` uses custom NS
      - `--root` uses root servers
      - Formats output clearly
      - Timeout prevents hangs

  - id: task-dns-sec
    feature_id: feat-network-cmds
    title: Implement DNSSEC validation
    estimate: 2
    priority: 1
    labels:
      - cli-command
      - security
    description: |
      ## ðŸ©» Summary

      Implement DNSSEC validation checking for domains.

      ## ðŸ§µ It's Done Whenâ€¦

      - Queries DNSKEY records
      - Verifies DS at parent
      - Validates signatures
      - Reports status clearly

  - id: task-tls-cert
    feature_id: feat-tls-cmds
    title: Implement TLS certificate retrieval
    estimate: 2
    priority: 1
    labels:
      - cli-command
      - security
    description: |
      ## ðŸ©» Summary

      Implement TLS certificate fetching from remote hosts.

      ## ðŸ§µ It's Done Whenâ€¦

      - Connects to TLS hosts
      - Retrieves certificates
      - `-c` shows full chain
      - Outputs PEM format
      - Custom ports work

  - id: task-tls-ciphers
    feature_id: feat-tls-cmds
    title: Implement cipher suite listing
    estimate: 3
    priority: 1
    labels:
      - cli-command
      - security
    description: |
      ## ðŸ©» Summary

      Implement TLS cipher suite enumeration for hosts.

      ## ðŸ§µ It's Done Whenâ€¦

      - Tests multiple ciphers
      - Shows supported suites
      - Includes strength ratings
      - Handles timeouts properly

  # Phase 3 Tasks
  - id: task-template-list
    feature_id: feat-template-system
    title: Implement template listing
    estimate: 2
    priority: 2
    labels:
      - cli-command
    description: |
      ## ðŸ©» Summary

      List available templates from the local cache directory.

      ## ðŸ§µ It's Done Whenâ€¦

      - Scans template directory
      - Shows template names
      - Reads `.jig.template.yaml`
      - Displays descriptions

  - id: task-template-update
    feature_id: feat-template-system
    title: Implement template repository updates
    estimate: 3
    priority: 2
    labels:
      - cli-command
    description: |
      ## ðŸ©» Summary

      Update local template cache from configured Git repository.

      ## ðŸ§µ It's Done Whenâ€¦

      - Pulls from configured repo
      - Uses configured branch
      - Shows update progress
      - Handles conflicts

  - id: task-template-new
    feature_id: feat-template-system
    title: Implement new template creation
    estimate: 2
    priority: 2
    labels:
      - cli-command
    description: |
      ## ðŸ©» Summary

      Create new empty template with metadata file.

      ## ðŸ§µ It's Done Whenâ€¦

      - Creates template directory
      - Generates `.jig.template.yaml`
      - Sets up basic structure
      - `-S` copies from `_shared`

  - id: task-template-tera
    feature_id: feat-template-system
    title: Implement Tera template processing
    estimate: 3
    priority: 2
    labels:
      - infrastructure
    description: |
      ## ðŸ©» Summary

      Set up Tera template engine for processing project templates.

      ## ðŸ§µ It's Done Whenâ€¦

      - Tera processes templates
      - Context variables work
      - `_shared` inheritance works
      - Error messages helpful

  - id: task-project-new
    feature_id: feat-project-cmds
    title: Implement project scaffolding
    estimate: 4
    priority: 2
    labels:
      - cli-command
    description: |
      ## ðŸ©» Summary

      Scaffold new projects from templates with Tera processing.

      ## ðŸ§µ It's Done Whenâ€¦

      - Creates project directory
      - Processes all templates
      - Generates `.jig.yaml`
      - `-g` initializes git
      - Context includes metadata

  - id: task-project-update
    feature_id: feat-project-cmds
    title: Implement project update with diffs
    estimate: 4
    priority: 2
    labels:
      - cli-command
    description: |
      ## ðŸ©» Summary

      Apply template updates to existing projects showing diffs.

      ## ðŸ§µ It's Done Whenâ€¦

      - Reads `.jig.yaml` tracking
      - Fetches template updates
      - Shows diffs for changes
      - Prompts for conflicts
      - Updates tracking file

  - id: task-project-bump
    feature_id: feat-project-cmds
    title: Implement dependency version bumping
    estimate: 3
    priority: 2
    labels:
      - cli-command
    description: |
      ## ðŸ©» Summary

      Update all dependencies to latest versions across package managers.

      ## ðŸ§µ It's Done Whenâ€¦

      - Updates `Cargo.toml` deps
      - Updates `package.json` deps
      - Updates GitHub Actions
      - Shows changes made
      - Warns about major bumps

  - id: task-project-dependabot
    feature_id: feat-project-cmds
    title: Implement `dependabot.yml` generation
    estimate: 2
    priority: 2
    labels:
      - cli-command
    description: |
      ## ðŸ©» Summary

      Generate Dependabot configuration based on detected ecosystems.

      ## ðŸ§µ It's Done Whenâ€¦

      - Detects all ecosystems
      - Generates valid YAML
      - Uses configuration template
      - Includes all options

  - id: task-git-clone
    feature_id: feat-git-integration
    title: Implement simplified clone
    estimate: 2
    priority: 2
    labels:
      - cli-command
    description: |
      ## ðŸ©» Summary

      Clone repositories using simplified username/repo syntax.

      ## ðŸ§µ It's Done Whenâ€¦

      - Accepts username/repo
      - Accepts just repo name
      - Uses configured username
      - Works with both backends

  - id: task-git-latest
    feature_id: feat-git-integration
    title: Implement latest commit retrieval
    estimate: 2
    priority: 2
    labels:
      - cli-command
    description: |
      ## ðŸ©» Summary

      Get latest commit hash from GitHub API.

      ## ðŸ§µ It's Done Whenâ€¦

      - Queries GitHub API
      - Gets default branch
      - Returns commit SHA
      - Handles custom branches

  - id: task-git-secrets
    feature_id: feat-git-integration
    title: Implement GitHub secrets management
    estimate: 3
    priority: 2
    labels:
      - cli-command
      - security
    description: |
      ## ðŸ©» Summary

      Set GitHub Actions secrets via API.

      ## ðŸ§µ It's Done Whenâ€¦

      - Accepts repo and secret name
      - Reads value or stdin
      - Encrypts properly
      - Confirms creation

  - id: task-git-yank
    feature_id: feat-git-integration
    title: Implement batch repo update
    estimate: 3
    priority: 2
    labels:
      - cli-command
    description: |
      ## ðŸ©» Summary

      Batch fetch and pull all repositories in a directory.

      ## ðŸ§µ It's Done Whenâ€¦

      - Finds all `.git` dirs
      - Runs fetch with params
      - Runs pull with params
      - Shows progress/summary
      - Handles errors gracefully

  - id: task-binary-metadata
    feature_id: feat-binary-mgmt
    title: Implement metadata storage
    estimate: 2
    priority: 2
    labels:
      - infrastructure
    description: |
      ## ðŸ©» Summary

      Set up YAML storage for installed binary metadata.

      ## ðŸ§µ It's Done Whenâ€¦

      - Creates `binaries.yaml`
      - Stores install info
      - Tracks file hashes
      - Updates atomically

  - id: task-binary-get
    feature_id: feat-binary-mgmt
    title: Implement binary downloading
    estimate: 3
    priority: 2
    labels:
      - cli-command
    description: |
      ## ðŸ©» Summary

      Download and install binaries from GitHub releases.

      ## ðŸ§µ It's Done Whenâ€¦

      - Queries release API
      - Detects platform/arch
      - Downloads correct binary
      - Makes executable
      - Updates metadata

  - id: task-binary-update
    feature_id: feat-binary-mgmt
    title: Implement binary updates
    estimate: 3
    priority: 2
    labels:
      - cli-command
    description: |
      ## ðŸ©» Summary

      Update installed binaries to latest versions.

      ## ðŸ§µ It's Done Whenâ€¦

      - Checks current hash
      - Queries latest release
      - Compares versions
      - Downloads if newer
      - Updates specific or all

  - id: task-binary-show
    feature_id: feat-binary-mgmt
    title: Implement binary info display
    estimate: 1
    priority: 2
    labels:
      - cli-command
    description: |
      ## ðŸ©» Summary

      Show information about installed binaries.

      ## ðŸ§µ It's Done Whenâ€¦

      - Reads metadata
      - Shows install path
      - `-H` shows hashes
      - Formats nicely

  - id: task-binary-remove
    feature_id: feat-binary-mgmt
    title: Implement binary removal
    estimate: 2
    priority: 2
    labels:
      - cli-command
    description: |
      ## ðŸ©» Summary

      Remove installed binaries and clean metadata.

      ## ðŸ§µ It's Done Whenâ€¦

      - Removes binary file
      - Cleans metadata
      - Handles missing files
      - Confirms removal

  # Phase 4 Tasks
  - id: task-api-client
    feature_id: feat-dave-api
    title: Create base API client
    estimate: 3
    priority: 2
    labels:
      - api-integration
    description: |
      ## ðŸ©» Summary

      Create base HTTP client for dave.io API with authentication and retry logic.

      ## ðŸ§µ It's Done Whenâ€¦

      - Base URL configured
      - Auth headers added
      - Retry logic works
      - JSON parsing works
      - Errors handled well

  - id: task-api-ping
    feature_id: feat-dave-api
    title: Implement ping endpoint
    estimate: 1
    priority: 2
    labels:
      - api-integration
    description: |
      ## ðŸ©» Summary

      Implement simple health check endpoint.

      ## ðŸ§µ It's Done Whenâ€¦

      - GET `/api/ping` works
      - Shows response JSON
      - Validates connectivity

  - id: task-api-token
    feature_id: feat-dave-api
    title: Implement token endpoints
    estimate: 3
    priority: 2
    labels:
      - api-integration
    description: |
      ## ðŸ©» Summary

      Implement all token management endpoints.

      ## ðŸ§µ It's Done Whenâ€¦

      - Token info retrieves details
      - Token revoke invalidates
      - Token usage shows stats
      - All use proper auth

  - id: task-api-image
    feature_id: feat-dave-api
    title: Implement image endpoints
    estimate: 2
    priority: 2
    labels:
      - api-integration
    description: |
      ## ðŸ©» Summary

      Implement image processing API endpoints.

      ## ðŸ§µ It's Done Whenâ€¦

      - Alt text generation works
      - Image optimization works
      - Files upload correctly
      - Results download properly

  - id: task-api-ticket
    feature_id: feat-dave-api
    title: Implement ticket endpoints
    estimate: 2
    priority: 2
    labels:
      - api-integration
    description: |
      ## ðŸ©» Summary

      Implement ticket management API endpoints.

      ## ðŸ§µ It's Done Whenâ€¦

      - Title generation works
      - Description generation works
      - Input methods work (file/stdin)
      - Enrichment endpoint ready

  - id: task-domainr-check
    feature_id: feat-domain-cmds
    title: Implement Domainr availability check
    estimate: 3
    priority: 2
    labels:
      - cli-command
      - api-integration
    description: |
      ## ðŸ©» Summary

      Check domain availability using Domainr API with Cloudflare filtering.

      ## ðŸ§µ It's Done Whenâ€¦

      - Queries Domainr API
      - Filters to CF TLDs
      - Shows availability
      - Handles API errors
      - Respects rate limits

  - id: task-rdap-expiry
    feature_id: feat-domain-cmds
    title: Implement RDAP expiry check
    estimate: 2
    priority: 2
    labels:
      - cli-command
    description: |
      ## ðŸ©» Summary

      Check domain expiration using RDAP protocol.

      ## ðŸ§µ It's Done Whenâ€¦

      - Queries RDAP server
      - Extracts expiry date
      - Shows days remaining
      - Falls back to WHOIS URL

  - id: task-domain-ns
    feature_id: feat-domain-cmds
    title: Implement nameserver lookup
    estimate: 2
    priority: 2
    labels:
      - cli-command
    description: |
      ## ðŸ©» Summary

      Retrieve nameservers via RDAP with DNS fallback.

      ## ðŸ§µ It's Done Whenâ€¦

      - RDAP query works
      - Falls back to DNS
      - Lists all nameservers
      - Handles both methods

  # Phase 5 Tasks
  - id: task-image-prep
    feature_id: feat-ai-utils
    title: Implement image preparation utility
    estimate: 3
    priority: 2
    labels:
      - ai-powered
    description: |
      ## ðŸ©» Summary

      Create utility to prepare images for Claude API with size and format constraints.

      ## ðŸ§µ It's Done Whenâ€¦

      - Resizes to max 2048px
      - Converts to WebP
      - Compresses to <5MB
      - Tries multiple quality levels
      - Preserves aspect ratio

  - id: task-claude-helper
    feature_id: feat-ai-utils
    title: Implement `ask_claude` helper
    estimate: 3
    priority: 2
    labels:
      - ai-powered
    description: |
      ## ðŸ©» Summary

      Create helper function for Claude API communication.

      ## ðŸ§µ It's Done Whenâ€¦

      - Sends prompts correctly
      - Handles images/data
      - Retries on failures
      - Parses responses
      - Rate limits respected

  - id: task-ai-rename
    feature_id: feat-ai-cmds
    title: Implement AI image renaming
    estimate: 3
    priority: 2
    labels:
      - cli-command
      - ai-powered
    description: |
      ## ðŸ©» Summary

      Rename images using AI-generated descriptive names.

      ## ðŸ§µ It's Done Whenâ€¦

      - Processes image files
      - Sends to Claude
      - Generates descriptive names
      - Follows naming format
      - Handles globs/multiple files

  - id: task-ai-commit
    feature_id: feat-ai-cmds
    title: Implement AI commit messages
    estimate: 3
    priority: 2
    labels:
      - cli-command
      - ai-powered
    description: |
      ## ðŸ©» Summary

      Generate conventional commit messages from diffs using AI.

      ## ðŸ§µ It's Done Whenâ€¦

      - Gets staged diff
      - Truncates large diffs
      - Generates conventional format
      - Adds emoji prefix
      - Applies before/after text

  - id: task-ai-alt
    feature_id: feat-ai-cmds
    title: Implement alt text generation
    estimate: 2
    priority: 2
    labels:
      - cli-command
      - ai-powered
    description: |
      ## ðŸ©» Summary

      Generate accessibility alt text for images via API.

      ## ðŸ§µ It's Done Whenâ€¦

      - Prepares image
      - Calls API endpoint
      - Returns alt text
      - Handles errors

  - id: task-ai-optimize
    feature_id: feat-ai-cmds
    title: Implement image optimization
    estimate: 2
    priority: 2
    labels:
      - cli-command
      - api-integration
    description: |
      ## ðŸ©» Summary

      Optimize images through dave.io API.

      ## ðŸ§µ It's Done Whenâ€¦

      - Uploads image
      - Receives optimized version
      - Saves to file
      - Shows size reduction

  - id: task-ai-ticket
    feature_id: feat-ai-cmds
    title: Implement ticket generation
    estimate: 3
    priority: 2
    labels:
      - cli-command
      - ai-powered
    description: |
      ## ðŸ©» Summary

      Generate ticket titles and descriptions using AI.

      ## ðŸ§µ It's Done Whenâ€¦

      - Title from description works
      - Description from title works
      - Input methods work
      - API calls succeed

  # Phase 6 Tasks
  - id: task-init-dirs
    feature_id: feat-init-system
    title: Create directory structure
    estimate: 2
    priority: 2
    labels:
      - shell-integration
    description: |
      ## ðŸ©» Summary

      Create all required directories for `jig` operation.

      ## ðŸ§µ It's Done Whenâ€¦

      - `~/.local/share/jig` created
      - bin subdirectory created
      - templates subdirectory created
      - Permissions correct

  - id: task-init-clone
    feature_id: feat-init-system
    title: Clone template repository
    estimate: 2
    priority: 2
    labels:
      - shell-integration
    description: |
      ## ðŸ©» Summary

      Clone the template repository during initialization.

      ## ðŸ§µ It's Done Whenâ€¦

      - Clones from GitHub
      - Uses configured repo/branch
      - Shows progress
      - Handles errors

  - id: task-init-config
    feature_id: feat-init-system
    title: Generate configuration
    estimate: 3
    priority: 2
    labels:
      - shell-integration
    description: |
      ## ðŸ©» Summary

      Generate initial configuration with encryption keys.

      ## ðŸ§µ It's Done Whenâ€¦

      - Generates age key
      - Creates config file
      - Prompts if exists
      - `--clobber` overwrites

  - id: task-init-shell
    feature_id: feat-init-system
    title: Check shell integration
    estimate: 2
    priority: 2
    labels:
      - shell-integration
    description: |
      ## ðŸ©» Summary

      Detect shell and provide integration instructions.

      ## ðŸ§µ It's Done Whenâ€¦

      - Detects current shell
      - Checks if integrated
      - Provides instructions
      - Supports all shells

  - id: task-ws-list
    feature_id: feat-workspace-mgmt
    title: Implement workspace listing
    estimate: 2
    priority: 2
    labels:
      - cli-command
    description: |
      ## ðŸ©» Summary

      List all configured workspaces.

      ## ðŸ§µ It's Done Whenâ€¦

      - Reads config
      - Lists workspaces
      - Shows current
      - Formats nicely

  - id: task-ws-switch
    feature_id: feat-workspace-mgmt
    title: Implement workspace switching
    estimate: 4
    priority: 2
    labels:
      - cli-command
      - shell-integration
    description: |
      ## ðŸ©» Summary

      Switch between workspaces with full state management.

      ## ðŸ§µ It's Done Whenâ€¦

      - Runs down commands
      - Clears old env vars
      - Sets new env vars
      - Runs up commands
      - Executes all hooks

  - id: task-ws-hook
    feature_id: feat-workspace-mgmt
    title: Implement shell hooks
    estimate: 3
    priority: 2
    labels:
      - shell-integration
    description: |
      ## ðŸ©» Summary

      Create shell integration hooks for workspace management.

      ## ðŸ§µ It's Done Whenâ€¦

      - Fish hook works
      - Bash hook works
      - Zsh hook works
      - Exports env vars
      - Updates PATH

  - id: task-term-sysinfo
    feature_id: feat-terminal-utils
    title: Implement system info display
    estimate: 3
    priority: 2
    labels:
      - cli-command
    description: |
      ## ðŸ©» Summary

      Display system information as terminal gauges.

      ## ðŸ§µ It's Done Whenâ€¦

      - Gathers system metrics
      - Generates visualizations
      - Detects terminal type
      - Displays appropriately

  - id: task-term-xkcd
    feature_id: feat-terminal-utils
    title: Implement XKCD display
    estimate: 2
    priority: 2
    labels:
      - cli-command
    description: |
      ## ðŸ©» Summary

      Fetch and display XKCD comics in terminal.

      ## ðŸ§µ It's Done Whenâ€¦

      - Fetches from API
      - Downloads images
      - Resizes for terminal
      - Renders with viuer

  # Phase 7 Tasks
  - id: task-dance-effects
    feature_id: feat-easter-eggs
    title: Integrate terminal effects
    estimate: 3
    priority: 3
    labels:
      - Enhancement
    description: |
      ## ðŸ©» Summary

      Integrate all terminal effect libraries for dance command.

      ## ðŸ§µ It's Done Whenâ€¦

      - tachyonfx works
      - tui-rain works
      - firework-rs works
      - All effects render
      - No conflicts

  - id: task-dance-sequence
    feature_id: feat-easter-eggs
    title: Design animation sequence
    estimate: 2
    priority: 3
    labels:
      - Enhancement
    description: |
      ## ðŸ©» Summary

      Create the animation sequence for `jig dance`.

      ## ðŸ§µ It's Done Whenâ€¦

      - Sequence designed
      - Timing works well
      - Effects transition
      - Looks impressive
      - Clean exit

  # Phase 8 Tasks
  - id: task-mcp-design
    feature_id: feat-mcp-server
    title: Design MCP architecture
    estimate: 3
    priority: 3
    labels:
      - Feature
      - Planning
    description: |
      ## ðŸ©» Summary

      Design the Model Context Protocol server architecture.

      ## ðŸ§µ It's Done Whenâ€¦

      - Protocol defined
      - Security model clear
      - Command filtering designed
      - Integration points identified

  - id: task-mcp-implement
    feature_id: feat-mcp-server
    title: Implement MCP server
    estimate: 5
    priority: 3
    labels:
      - Feature
      - api-integration
    description: |
      ## ðŸ©» Summary

      Implement the stdio MCP server using rmcp.

      ## ðŸ§µ It's Done Whenâ€¦

      - Server responds to requests
      - Commands exposed properly
      - Security boundaries work
      - Examples provided

  # Phase 9 Tasks (many more tasks would go here)
  - id: task-unit-tests
    feature_id: feat-test-suite
    title: Write unit tests for core logic
    estimate: 5
    priority: 1
    labels:
      - testing
    description: |
      ## ðŸ©» Summary

      Write comprehensive unit tests for all core functionality.

      ## ðŸ§µ It's Done Whenâ€¦

      - Crypto operations tested
      - Generation utilities tested
      - Config loading tested
      - Utilities tested
      - Mocks created

  - id: task-integration-tests
    feature_id: feat-test-suite
    title: Write integration tests
    estimate: 5
    priority: 1
    labels:
      - testing
    description: |
      ## ðŸ©» Summary

      Write integration tests for CLI commands.

      ## ðŸ§µ It's Done Whenâ€¦

      - Command execution tested
      - Output validation works
      - Error cases covered
      - Fixtures created

  - id: task-property-tests
    feature_id: feat-test-suite
    title: Add property-based tests
    estimate: 3
    priority: 1
    labels:
      - testing
    description: |
      ## ðŸ©» Summary

      Add property-based testing for generators.

      ## ðŸ§µ It's Done Whenâ€¦

      - Password generation tested
      - Hex generation tested
      - Key generation tested
      - Edge cases found

  - id: task-ci-setup
    feature_id: feat-cicd
    title: Configure GitHub Actions
    estimate: 3
    priority: 1
    labels:
      - infrastructure
      - Deployment
    description: |
      ## ðŸ©» Summary

      Set up CI/CD pipeline with GitHub Actions.

      ## ðŸ§µ It's Done Whenâ€¦

      - Tests run on push
      - Linting passes
      - Multiple OS tested
      - Caching configured

  - id: task-release-automation
    feature_id: feat-cicd
    title: Implement release automation
    estimate: 3
    priority: 1
    labels:
      - Deployment
    description: |
      ## ðŸ©» Summary

      Automate binary releases to GitHub.

      ## ðŸ§µ It's Done Whenâ€¦

      - Tags trigger builds
      - Binaries uploaded
      - Checksums generated
      - Release notes created

  - id: task-cross-platform
    feature_id: feat-cicd
    title: Set up cross-platform builds
    estimate: 2
    priority: 1
    labels:
      - Deployment
    description: |
      ## ðŸ©» Summary

      Configure builds for all target platforms.

      ## ðŸ§µ It's Done Whenâ€¦

      - macOS builds work
      - Linux builds work
      - Windows builds work
      - All architectures covered

  - id: task-readme-review
    feature_id: feat-documentation
    title: Review and update README
    estimate: 3
    priority: 1
    labels:
      - documentation
    description: |
      ## ðŸ©» Summary

      Ensure README accurately reflects implementation.

      ## ðŸ§µ It's Done Whenâ€¦

      - All commands documented
      - Examples accurate
      - Configuration complete
      - Installation clear

  - id: task-help-text
    feature_id: feat-documentation
    title: Ensure comprehensive help messages
    estimate: 3
    priority: 1
    labels:
      - documentation
    description: |
      ## ðŸ©» Summary

      Review and improve all `--help` output.

      ## ðŸ§µ It's Done Whenâ€¦

      - Every command has help
      - Options documented
      - Examples included
      - Formatting consistent

  - id: task-man-pages
    feature_id: feat-documentation
    title: Create man pages
    estimate: 2
    priority: 1
    labels:
      - documentation
    description: |
      ## ðŸ©» Summary

      Generate man pages for all commands.

      ## ðŸ§µ It's Done Whenâ€¦

      - Man pages generated
      - Sections complete
      - Examples included
      - Install configured

  - id: task-cargo-package
    feature_id: feat-packaging
    title: Configure cargo package
    estimate: 2
    priority: 1
    labels:
      - Deployment
    description: |
      ## ðŸ©» Summary

      Set up package for crates.io publication.

      ## ðŸ§µ It's Done Whenâ€¦

      - `Cargo.toml` complete
      - Metadata accurate
      - `cargo install` works
      - Dependencies minimal

  - id: task-homebrew-tap
    feature_id: feat-packaging
    title: Create Homebrew formula
    estimate: 2
    priority: 1
    labels:
      - Deployment
    description: |
      ## ðŸ©» Summary

      Create Homebrew tap formula for installation.

      ## ðŸ§µ It's Done Whenâ€¦

      - Formula created
      - Tap repository set up
      - Installation tested
      - Updates automated

  - id: task-binary-signing
    feature_id: feat-packaging
    title: Implement binary signing
    estimate: 3
    priority: 1
    labels:
      - security
      - Deployment
    description: |
      ## ðŸ©» Summary

      Sign release binaries to prevent security warnings.

      ## ðŸ§µ It's Done Whenâ€¦

      - macOS signing works
      - Windows signing works
      - Certificates configured
      - CI integration complete

  # Cross-cutting tasks
  - id: task-error-types
    epic_id: phase-1
    title: Implement comprehensive error types
    estimate: 3
    priority: 1
    labels:
      - infrastructure
    description: |
      ## ðŸ©» Summary

      Create consistent error handling across the application.

      ## ðŸ§µ It's Done Whenâ€¦

      - Error types defined
      - Context preserved
      - User messages clear
      - Debug info available

  - id: task-benchmarks
    epic_id: phase-9
    title: Set up benchmarking suite
    estimate: 3
    priority: 1
    labels:
      - testing
      - performance
    description: |
      ## ðŸ©» Summary

      Create performance benchmarks for critical paths.

      ## ðŸ§µ It's Done Whenâ€¦

      - Startup time measured
      - Command performance tracked
      - Memory usage monitored
      - Regression detection works

  - id: task-security-audit
    epic_id: phase-9
    title: Perform security audit
    estimate: 3
    priority: 1
    labels:
      - security
      - testing
    description: |
      ## ðŸ©» Summary

      Audit code for security vulnerabilities.

      ## ðŸ§µ It's Done Whenâ€¦

      - Dependencies scanned
      - Code reviewed
      - Secrets handled safely
      - Audit trail documented
