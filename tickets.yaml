# Linear Tickets for Jig CLI Project
# This file defines the complete ticket structure for implementing the jig CLI tool

metadata:
  team: "jig"
  project_name: "Jig CLI v1.0"
  labels:
    - name: "infrastructure"
      description: "Core infrastructure and foundational components"
      color: "#5E6AD2"
    - name: "cli-command"
      description: "Individual CLI command implementations"
      color: "#26A69A"
    - name: "api-integration"
      description: "External API integrations"
      color: "#FF7043"
    - name: "ai-powered"
      description: "AI and machine learning features"
      color: "#AB47BC"
    - name: "shell-integration"
      description: "Shell and system integration features"
      color: "#66BB6A"
    - name: "testing"
      description: "Testing and quality assurance"
      color: "#42A5F5"
    - name: "documentation"
      description: "Documentation and guides"
      color: "#FFA726"
    - name: "security"
      description: "Security-related features"
      color: "#EF5350"
    - name: "performance"
      description: "Performance optimization"
      color: "#FFCA28"

epics:
  - id: "epic-phase1"
    title: "Phase 1: Core Infrastructure & Project Setup"
    description: |
      ## ðŸ©» Summary

      Establish the foundational components of the jig CLI application. This phase focuses on setting up the command-line argument parsing, configuration management, and essential shared utilities that all other commands will rely on.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] CLI framework is fully configured with clap
      - [ ] Configuration system loads and merges YAML files correctly
      - [ ] Core utilities module provides Git abstraction and helper functions
      - [ ] Error handling and logging strategy is implemented consistently
      - [ ] All global CLI options work correctly

      ## ðŸ“¦ Related Material

      - [README.md - Configuration section](./README.md#configuration)
      - [PLAN.md - Phase 1 details](./PLAN.md#phase-1-core-infrastructure--project-setup)

      ## ðŸ«§ Further Detail

      This phase is critical as it establishes the foundation for all subsequent development. The configuration system must handle the complex secret resolution hierarchy, and the Git abstraction layer needs to support both CLI and library approaches.
    priority: 1
    estimate: 21
    labels: ["infrastructure"]

  - id: "epic-phase2"
    title: "Phase 2: Foundational Command Groups"
    description: |
      ## ðŸ©» Summary

      Implement the core, self-contained utility commands that provide immediate value without significant external dependencies. This includes crypto operations, generation utilities, and basic network tools.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] All crypto commands (encrypt, decrypt, public) work with age encryption
      - [ ] Generation commands produce cryptographically secure outputs
      - [ ] Network and TLS commands provide reliable diagnostics
      - [ ] All commands handle errors gracefully and provide helpful output

      ## ðŸ“¦ Related Material

      - [README.md - Command Reference](./README.md#command-reference)
      - [PLAN.md - Phase 2 details](./PLAN.md#phase-2-foundational-command-groups)

      ## ðŸ«§ Further Detail

      These commands form the core utility set of jig. They should work independently and provide immediate value to users. Special attention to cryptographic security and proper entropy sources is essential.
    priority: 1
    estimate: 34
    labels: ["cli-command", "security"]
    depends_on: ["epic-phase1"]

  - id: "epic-phase3"
    title: "Phase 3: Project & Git Management"
    description: |
      ## ðŸ©» Summary

      Build commands for managing projects and interacting with Git repositories. This includes the template system, project scaffolding, and Git utilities that require filesystem manipulation and external process execution.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Template system can create, list, and update project templates
      - [ ] Project commands can scaffold and update projects from templates
      - [ ] Git integration provides simplified repository management
      - [ ] Binary release management handles GitHub releases efficiently

      ## ðŸ“¦ Related Material

      - [README.md - Project commands](./README.md#jig-project)
      - [README.md - Git commands](./README.md#jig-git)
      - [PLAN.md - Phase 3 details](./PLAN.md#phase-3-project--git-management)

      ## ðŸ«§ Further Detail

      This phase introduces more complex interactions with the filesystem and external services. The template system using Tera is particularly important for project scaffolding workflows.
    priority: 2
    estimate: 42
    labels: ["cli-command", "infrastructure"]
    depends_on: ["epic-phase1"]

  - id: "epic-phase4"
    title: "Phase 4: External API Integration"
    description: |
      ## ðŸ©» Summary

      Implement features that rely on external APIs including dave.io, Domainr, and RDAP services. This phase establishes the foundation for all API-dependent features.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Dave.io API client provides reliable base functionality
      - [ ] Domain commands integrate with Domainr and RDAP services
      - [ ] API authentication and error handling work consistently
      - [ ] Rate limiting and caching prevent API abuse

      ## ðŸ“¦ Related Material

      - [README.md - API commands](./README.md#jig-api)
      - [README.md - Domain commands](./README.md#jig-domain)
      - [PLAN.md - Phase 4 details](./PLAN.md#phase-4-external-api-integration)

      ## ðŸ«§ Further Detail

      External API integration requires careful attention to authentication, rate limiting, and graceful degradation when services are unavailable.
    priority: 2
    estimate: 28
    labels: ["api-integration"]
    depends_on: ["epic-phase2"]

  - id: "epic-phase5"
    title: "Phase 5: AI-Powered Features"
    description: |
      ## ðŸ©» Summary

      Integrate with AI services (Claude) to deliver intelligent automation features. This includes image processing, commit message generation, and content creation utilities.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] AI utilities handle image preparation and API communication
      - [ ] Image renaming uses AI to generate descriptive filenames
      - [ ] Commit message generation creates conventional commits from diffs
      - [ ] Ticket and content generation features work reliably

      ## ðŸ“¦ Related Material

      - [README.md - AI commands](./README.md#jig-ai)
      - [README.md - API image commands](./README.md#jig-api-image)
      - [PLAN.md - Phase 5 details](./PLAN.md#phase-5-ai-powered-features)

      ## ðŸ«§ Further Detail

      AI features require careful prompt engineering and rate limiting. Image processing must handle various formats and optimize for API constraints.
    priority: 2
    estimate: 21
    labels: ["ai-powered", "api-integration"]
    depends_on: ["epic-phase4"]

  - id: "epic-phase6"
    title: "Phase 6: Advanced Shell & System Integration"
    description: |
      ## ðŸ©» Summary

      Implement features requiring deep integration with the user's shell and local environment. This includes initialization, workspace management, and terminal utilities.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Initialization system sets up complete jig environment
      - [ ] Workspace management handles environment switching seamlessly
      - [ ] Terminal utilities provide rich visual experiences
      - [ ] Shell integration works across bash, zsh, and fish

      ## ðŸ“¦ Related Material

      - [README.md - Workspace commands](./README.md#jig-workspace)
      - [README.md - Terminal commands](./README.md#jig-terminal)
      - [PLAN.md - Phase 6 details](./PLAN.md#phase-6-advanced-shell--system-integration)

      ## ðŸ«§ Further Detail

      Shell integration is complex and must handle different shell environments gracefully. The workspace system is particularly important for developer workflow.
    priority: 2
    estimate: 28
    labels: ["shell-integration"]
    depends_on: ["epic-phase3"]

  - id: "epic-phase7"
    title: "Phase 7: Polish & Easter Eggs"
    description: |
      ## ðŸ©» Summary

      Add features that enhance user experience but are not critical to core functionality. This includes the animated dance command and other delightful touches.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Dance command provides entertaining terminal effects
      - [ ] Animation sequences are smooth and interruptible
      - [ ] Easter egg is properly hidden from help output
      - [ ] Multiple animation modes provide variety

      ## ðŸ“¦ Related Material

      - [README.md - Easter Egg Implementation](./README.md#easter-egg-implementation)
      - [PLAN.md - Phase 7 details](./PLAN.md#phase-7-polish--easter-eggs)

      ## ðŸ«§ Further Detail

      While not critical, these features contribute significantly to user delight and tool personality. The terminal effects libraries integration requires careful testing.
    priority: 3
    estimate: 14
    labels: ["cli-command"]
    depends_on: ["epic-phase6"]

  - id: "epic-phase8"
    title: "Phase 8: Model Context Protocol"
    description: |
      ## ðŸ©» Summary

      Implement forward-looking Model Context Protocol server functionality planned for post-initial release. This enables AI agent integration with jig.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] MCP server architecture is designed and documented
      - [ ] Stdio MCP server implementation works with AI agents
      - [ ] Protocol specification is complete and tested
      - [ ] Security boundaries and permissions are properly implemented

      ## ðŸ“¦ Related Material

      - [README.md - MCP section](./README.md#jig-mcp)
      - [PLAN.md - Phase 8 details](./PLAN.md#phase-8-future--protocol-implementation)

      ## ðŸ«§ Further Detail

      This is a post-v1.0 feature that enables AI agents to interact with jig functionality. Security and proper command filtering are essential.
    priority: 3
    estimate: 14
    labels: ["api-integration"]
    depends_on: ["epic-phase7"]

  - id: "epic-phase9"
    title: "Phase 9: Testing, Documentation & Release"
    description: |
      ## ðŸ©» Summary

      Finalize the application for public release with comprehensive testing, documentation, and distribution setup. This phase ensures production readiness.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Test coverage exceeds 80% with comprehensive test suite
      - [ ] CI/CD pipeline builds and tests across all platforms
      - [ ] Documentation is complete and accurate
      - [ ] Distribution methods work correctly (cargo, homebrew, etc.)

      ## ðŸ“¦ Related Material

      - [README.md - Installation section](./README.md#installation)
      - [PLAN.md - Phase 9 details](./PLAN.md#phase-9-testing-documentation--release)

      ## ðŸ«§ Further Detail

      This phase is critical for public release success. Testing must be comprehensive, and documentation must be clear for new users.
    priority: 1
    estimate: 35
    labels: ["testing", "documentation"]
    depends_on: ["epic-phase8"]

features:
  # Phase 1 Features
  - id: "feature-cli-framework"
    epic_id: "epic-phase1"
    title: "CLI Framework Setup"
    description: |
      ## ðŸ©» Summary

      Set up the main command structure using clap with proper global options, command abbreviation support, and error handling.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Main jig command structure with subcommands is implemented
      - [ ] All global options (--version, --help, --yes, --json, --verbose, --quiet, --silent) work
      - [ ] Command abbreviation is configured and tested
      - [ ] Error propagation uses anyhow or custom error types

      ## ðŸ“¦ Related Material

      - [Clap documentation](https://docs.rs/clap/latest/clap/)
      - [README.md - Global Command Options](./README.md#global-command-options)
    priority: 1
    estimate: 8
    labels: ["infrastructure"]

  - id: "feature-config-management"
    epic_id: "epic-phase1"
    title: "Configuration Management"
    description: |
      ## ðŸ©» Summary

      Implement robust YAML configuration loading with hierarchical secret resolution and validation.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] ~/.jig.yaml loading works with saphyr/serde
      - [ ] Optional ~/.jig.secret.yaml merging is implemented
      - [ ] Hierarchical secret resolution (key/file/env) works correctly
      - [ ] Configuration validation prevents invalid states

      ## ðŸ“¦ Related Material

      - [README.md - Configuration](./README.md#configuration)
      - [Serde documentation](https://serde.rs/)
    priority: 1
    estimate: 8
    labels: ["infrastructure"]

  - id: "feature-core-utilities"
    epic_id: "epic-phase1"
    title: "Core Utilities Module"
    description: |
      ## ðŸ©» Summary

      Create shared utilities including Git abstraction, error handling, logging, and common helper functions.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Shared utilities module structure is created
      - [ ] Git abstraction layer (CLI vs gix) works based on config
      - [ ] Error handling and logging strategy using tracing is implemented
      - [ ] resolve_github_username utility works correctly

      ## ðŸ“¦ Related Material

      - [README.md - Git Abstraction](./README.md#git-abstraction)
      - [Tracing documentation](https://docs.rs/tracing/latest/tracing/)
    priority: 1
    estimate: 5
    labels: ["infrastructure"]

  # Phase 2 Features
  - id: "feature-crypto-commands"
    epic_id: "epic-phase2"
    title: "Crypto Commands"
    description: |
      ## ðŸ©» Summary

      Implement age encryption/decryption commands with proper key handling and binary support.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] age encryption (encrypt command) works with files and stdin
      - [ ] age decryption (decrypt command) works with files and stdin
      - [ ] Public key derivation from private keys is implemented
      - [ ] Binary input/output handling works correctly

      ## ðŸ“¦ Related Material

      - [README.md - jig crypto](./README.md#jig-crypto)
      - [Age encryption specification](https://age-encryption.org/)
    priority: 1
    estimate: 8
    labels: ["cli-command", "security"]

  - id: "feature-generate-commands"
    epic_id: "epic-phase2"
    title: "Generate Commands"
    description: |
      ## ðŸ©» Summary

      Implement cryptographically secure generation utilities for hex, passwords, keys, and JWTs.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Hex generation produces cryptographically secure random values
      - [ ] Password generation with entropy validation using zxcvbn works
      - [ ] XKCD password mode generates word-based passphrases
      - [ ] Age and WireGuard key generation work correctly
      - [ ] JWT generation with configurable claims and expiry is implemented

      ## ðŸ“¦ Related Material

      - [README.md - jig generate](./README.md#jig-generate)
      - [zxcvbn documentation](https://github.com/dropbox/zxcvbn)
    priority: 1
    estimate: 13
    labels: ["cli-command", "security"]

  - id: "feature-network-commands"
    epic_id: "epic-phase2"
    title: "Network Commands"
    description: |
      ## ðŸ©» Summary

      Implement network diagnostic utilities including DNS operations and cache management.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] DNS cache flush works across different operating systems
      - [ ] DNS lookup with custom servers is implemented
      - [ ] DNSSEC validation provides proper security checks
      - [ ] Timeout handling for network operations works correctly

      ## ðŸ“¦ Related Material

      - [README.md - jig network](./README.md#jig-network)
    priority: 1
    estimate: 8
    labels: ["cli-command"]

  - id: "feature-tls-commands"
    epic_id: "epic-phase2"
    title: "TLS Commands"
    description: |
      ## ðŸ©» Summary

      Implement TLS certificate retrieval and cipher suite analysis tools.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] TLS certificate retrieval from remote hosts works
      - [ ] Certificate chain support is implemented
      - [ ] Cipher suite listing and analysis is functional
      - [ ] Connection timeout and error handling work properly

      ## ðŸ“¦ Related Material

      - [README.md - jig tls](./README.md#jig-tls)
    priority: 1
    estimate: 5
    labels: ["cli-command", "security"]

  # Phase 3 Features
  - id: "feature-template-system"
    epic_id: "epic-phase3"
    title: "Template System"
    description: |
      ## ðŸ©» Summary

      Implement project template management with Tera processing and shared template support.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Template listing from local cache works
      - [ ] Template repository updates via Git are functional
      - [ ] New template creation with .jig.template.yaml works
      - [ ] Tera template processing with context is implemented
      - [ ] _shared template support is working

      ## ðŸ“¦ Related Material

      - [README.md - jig project template](./README.md#jig-project-template)
      - [Tera documentation](https://tera.netlify.app/)
    priority: 2
    estimate: 13
    labels: ["cli-command", "infrastructure"]

  - id: "feature-project-commands"
    epic_id: "epic-phase3"
    title: "Project Commands"
    description: |
      ## ðŸ©» Summary

      Implement project scaffolding, updates, and dependency management features.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Project scaffolding from templates with .jig.yaml tracking works
      - [ ] Project update with diff display is implemented
      - [ ] Dependabot.yml generation based on detected ecosystems works
      - [ ] Dependency version bumping for multiple package managers is functional

      ## ðŸ“¦ Related Material

      - [README.md - jig project](./README.md#jig-project)
    priority: 2
    estimate: 13
    labels: ["cli-command"]

  - id: "feature-git-integration"
    epic_id: "epic-phase3"
    title: "Git Integration"
    description: |
      ## ðŸ©» Summary

      Implement Git utilities including simplified cloning, commit operations, and batch repository management.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Simplified clone (username/repo) works with both gix and CLI
      - [ ] Latest commit hash retrieval from GitHub API is functional
      - [ ] GitHub secrets management via API works
      - [ ] Batch repo update (yank) with progress indicators is implemented

      ## ðŸ“¦ Related Material

      - [README.md - jig git](./README.md#jig-git)
    priority: 2
    estimate: 8
    labels: ["cli-command"]

  - id: "feature-binary-management"
    epic_id: "epic-phase3"
    title: "Binary Release Management"
    description: |
      ## ðŸ©» Summary

      Implement GitHub binary release management with metadata storage and PATH integration.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Binary metadata storage in ~/.local/share/jig/binaries.yaml works
      - [ ] GitHub release downloading with architecture detection is functional
      - [ ] Binary installation and PATH management work correctly
      - [ ] Binary updates and removal with cleanup are implemented

      ## ðŸ“¦ Related Material

      - [README.md - jig git binary](./README.md#jig-git-binary)
    priority: 2
    estimate: 8
    labels: ["cli-command"]

  # Phase 4 Features
  - id: "feature-api-client"
    epic_id: "epic-phase4"
    title: "Dave.io API Client"
    description: |
      ## ðŸ©» Summary

      Create base API client for dave.io with authentication, retry logic, and core endpoints.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Base API client with authentication headers is implemented
      - [ ] Ping endpoint for health checks works
      - [ ] Token management endpoints (info, revoke, usage) are functional
      - [ ] Retry logic and error handling work correctly

      ## ðŸ“¦ Related Material

      - [README.md - jig api](./README.md#jig-api)
    priority: 2
    estimate: 8
    labels: ["api-integration"]

  - id: "feature-domain-commands"
    epic_id: "epic-phase4"
    title: "Domain Commands"
    description: |
      ## ðŸ©» Summary

      Integrate Domainr API and RDAP services for domain information and availability checks.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Domainr API integration for availability checks works
      - [ ] RDAP client for expiry checks is functional
      - [ ] Nameserver lookup with DNS fallback is implemented
      - [ ] Cloudflare TLD filtering is working correctly

      ## ðŸ“¦ Related Material

      - [README.md - jig domain](./README.md#jig-domain)
    priority: 2
    estimate: 8
    labels: ["api-integration"]

  # Phase 5 Features
  - id: "feature-ai-utilities"
    epic_id: "epic-phase5"
    title: "AI Utilities"
    description: |
      ## ðŸ©» Summary

      Implement core AI utilities for image processing and Claude API communication.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] prepare_image_for_claude utility with resizing and optimization works
      - [ ] ask_claude helper function with retry logic is implemented
      - [ ] Rate limiting and quota management are functional
      - [ ] Error handling for AI API calls works correctly

      ## ðŸ“¦ Related Material

      - [README.md - Shared Utilities](./README.md#shared-utilities)
    priority: 2
    estimate: 8
    labels: ["ai-powered", "api-integration"]

  - id: "feature-ai-commands"
    epic_id: "epic-phase5"
    title: "AI Commands"
    description: |
      ## ðŸ©» Summary

      Implement AI-powered commands for image processing, commit generation, and content creation.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] AI image renaming with descriptive filenames works
      - [ ] AI commit message generation from diffs is functional
      - [ ] Image alt text generation and optimization API work
      - [ ] Ticket title/description generation is implemented

      ## ðŸ“¦ Related Material

      - [README.md - jig ai](./README.md#jig-ai)
      - [README.md - jig api ticket](./README.md#jig-api-ticket)
    priority: 2
    estimate: 13
    labels: ["ai-powered", "cli-command"]

  # Phase 6 Features
  - id: "feature-initialization"
    epic_id: "epic-phase6"
    title: "Initialization System"
    description: |
      ## ðŸ©» Summary

      Implement complete jig environment setup including directories, templates, and shell integration.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Directory structure creation works correctly
      - [ ] Template repository cloning is functional
      - [ ] Shell integration detection works across shells
      - [ ] Shell plugin installers provide clear instructions

      ## ðŸ“¦ Related Material

      - [README.md - jig init](./README.md#jig-init)
    priority: 2
    estimate: 8
    labels: ["shell-integration"]

  - id: "feature-workspace-management"
    epic_id: "epic-phase6"
    title: "Workspace Management"
    description: |
      ## ðŸ©» Summary

      Implement workspace switching with environment variable management and shell hooks.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Workspace listing displays configured workspaces
      - [ ] Workspace switching logic with state transitions works
      - [ ] Environment variable management and isolation are functional
      - [ ] Shell hooks for bash/zsh/fish are implemented

      ## ðŸ“¦ Related Material

      - [README.md - jig workspace](./README.md#jig-workspace)
    priority: 2
    estimate: 13
    labels: ["shell-integration"]

  - id: "feature-terminal-utilities"
    epic_id: "epic-phase6"
    title: "Terminal Utilities"
    description: |
      ## ðŸ©» Summary

      Implement visual terminal utilities for system information and entertainment.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] System info visualization using viuer works
      - [ ] XKCD comic display in terminal is functional
      - [ ] Terminal capability detection works correctly
      - [ ] Fallback rendering modes are implemented

      ## ðŸ“¦ Related Material

      - [README.md - jig terminal](./README.md#jig-terminal)
    priority: 2
    estimate: 5
    labels: ["cli-command"]

  # Phase 7 Features
  - id: "feature-easter-eggs"
    epic_id: "epic-phase7"
    title: "Easter Eggs & Polish"
    description: |
      ## ðŸ©» Summary

      Implement the dance command with terminal effects and animation sequences.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Terminal effects libraries integration works
      - [ ] Animation sequences are smooth and varied
      - [ ] Command is hidden from help output
      - [ ] Interrupt handling for clean exit works
      - [ ] Multiple animation modes provide entertainment

      ## ðŸ“¦ Related Material

      - [README.md - Easter Egg Implementation](./README.md#easter-egg-implementation)
    priority: 3
    estimate: 8
    labels: ["cli-command"]

  # Phase 8 Features
  - id: "feature-mcp-protocol"
    epic_id: "epic-phase8"
    title: "Model Context Protocol"
    description: |
      ## ðŸ©» Summary

      Implement MCP server for AI agent integration with proper security boundaries.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] MCP server architecture is designed and documented
      - [ ] Stdio MCP server using rmcp is implemented
      - [ ] Protocol specification is complete
      - [ ] Security boundaries and command filtering work

      ## ðŸ“¦ Related Material

      - [README.md - jig mcp](./README.md#jig-mcp)
    priority: 3
    estimate: 8
    labels: ["api-integration"]

  # Phase 9 Features
  - id: "feature-test-suite"
    epic_id: "epic-phase9"
    title: "Test Suite"
    description: |
      ## ðŸ©» Summary

      Implement comprehensive testing including unit tests, integration tests, and test fixtures.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Unit tests for crypto operations achieve >80% coverage
      - [ ] Unit tests for generation utilities are comprehensive
      - [ ] Integration tests for CLI commands work correctly
      - [ ] Test fixtures and mocks are properly implemented

      ## ðŸ“¦ Related Material

      - [PLAN.md - Testing section](./PLAN.md#phase-9-testing-documentation--release)
    priority: 1
    estimate: 13
    labels: ["testing"]

  - id: "feature-ci-cd"
    epic_id: "epic-phase9"
    title: "CI/CD Pipeline"
    description: |
      ## ðŸ©» Summary

      Configure GitHub Actions for automated testing, building, and release processes.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] GitHub Actions workflow runs tests, rustfmt, and clippy
      - [ ] Cross-platform builds work correctly
      - [ ] Release automation creates and publishes binaries
      - [ ] Code coverage and vulnerability scanning are implemented

      ## ðŸ“¦ Related Material

      - [PLAN.md - CI/CD section](./PLAN.md#phase-9-testing-documentation--release)
    priority: 1
    estimate: 8
    labels: ["testing", "infrastructure"]

  - id: "feature-documentation"
    epic_id: "epic-phase9"
    title: "Documentation"
    description: |
      ## ðŸ©» Summary

      Complete and verify all documentation including README, help messages, and guides.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] README.md is reviewed and updated for accuracy
      - [ ] All --help messages are clear and comprehensive
      - [ ] Installation guides are tested and work correctly
      - [ ] Troubleshooting guide addresses common issues

      ## ðŸ“¦ Related Material

      - [README.md](./README.md)
    priority: 1
    estimate: 8
    labels: ["documentation"]

  - id: "feature-distribution"
    epic_id: "epic-phase9"
    title: "Distribution"
    description: |
      ## ðŸ©» Summary

      Set up distribution methods including Cargo, Homebrew, and shell completions.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Cargo package metadata is configured correctly
      - [ ] Homebrew tap formula is created and tested
      - [ ] Installation methods work reliably
      - [ ] Shell completion files are generated and functional

      ## ðŸ“¦ Related Material

      - [README.md - Installation](./README.md#installation)
    priority: 1
    estimate: 5
    labels: ["infrastructure"]

tasks:
  # Phase 1 Tasks
  - id: "task-clap-setup"
    feature_id: "feature-cli-framework"
    title: "Set up main jig command structure with clap"
    description: |
      ## ðŸ©» Summary

      Configure the main command structure using clap with all subcommands and proper help organization.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Main jig binary with clap derives is created
      - [ ] All subcommands from the README are defined
      - [ ] Command structure matches the documented hierarchy
      - [ ] Help output is well-organized and informative

      ## ðŸ“¦ Related Material

      - [Clap documentation](https://docs.rs/clap/latest/clap/)
      - [README.md - Command Structure](./README.md#command-structure)
    priority: 1
    estimate: 3
    labels: ["infrastructure"]

  - id: "task-global-options"
    feature_id: "feature-cli-framework"
    title: "Implement global options"
    description: |
      ## ðŸ©» Summary

      Implement all global CLI options including version, help, output control, and verbosity flags.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] --version/-V shows version information
      - [ ] --help/-h works for all commands
      - [ ] --yes/-y skips all confirmations
      - [ ] --json/-j outputs structured JSON
      - [ ] --verbose/-v, --quiet/-q, --silent/-s control output levels
      - [ ] Incompatible options are properly handled

      ## ðŸ“¦ Related Material

      - [README.md - Global Command Options](./README.md#global-command-options)
    priority: 1
    estimate: 2
    labels: ["infrastructure"]

  - id: "task-command-abbreviation"
    feature_id: "feature-cli-framework"
    title: "Configure command abbreviation support"
    description: |
      ## ðŸ©» Summary

      Enable clap command abbreviation to allow users to use shortened command names.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Commands can be abbreviated to the point of disambiguation
      - [ ] Abbreviation works at all command levels
      - [ ] Error messages for ambiguous abbreviations are helpful
      - [ ] Feature is documented and tested

      ## ðŸ“¦ Related Material

      - [Clap documentation on command abbreviation](https://docs.rs/clap/latest/clap/)
    priority: 1
    estimate: 1
    labels: ["infrastructure"]

  - id: "task-error-handling"
    feature_id: "feature-cli-framework"
    title: "Set up proper error propagation"
    description: |
      ## ðŸ©» Summary

      Implement comprehensive error handling strategy using anyhow or custom error types.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Error types are defined for different error categories
      - [ ] Error propagation works consistently throughout the application
      - [ ] Error messages are user-friendly and actionable
      - [ ] Debug information is available when needed

      ## ðŸ“¦ Related Material

      - [Anyhow documentation](https://docs.rs/anyhow/latest/anyhow/)
    priority: 1
    estimate: 2
    labels: ["infrastructure"]

  - id: "task-yaml-loading"
    feature_id: "feature-config-management"
    title: "Implement ~/.jig.yaml loading with saphyr/serde"
    description: |
      ## ðŸ©» Summary

      Set up YAML configuration file loading using saphyr and serde with proper error handling.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] ~/.jig.yaml is loaded correctly with saphyr
      - [ ] Configuration struct uses serde derives appropriately
      - [ ] Missing file handling works gracefully
      - [ ] YAML syntax errors provide helpful messages

      ## ðŸ“¦ Related Material

      - [Saphyr documentation](https://docs.rs/saphyr/latest/saphyr/)
      - [README.md - Configuration](./README.md#configuration)
    priority: 1
    estimate: 2
    labels: ["infrastructure"]

  - id: "task-secret-file-loading"
    feature_id: "feature-config-management"
    title: "Implement secret file loading and merging"
    description: |
      ## ðŸ©» Summary

      Implement optional ~/.jig.secret.yaml loading with proper merging into main configuration.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Secret file loading works when file exists
      - [ ] Configuration merging preserves precedence correctly
      - [ ] Missing secret file doesn't cause errors
      - [ ] Secret file path can be configured

      ## ðŸ“¦ Related Material

      - [README.md - Configuration Reference](./README.md#complete-configuration-reference)
    priority: 1
    estimate: 2
    labels: ["infrastructure", "security"]

  - id: "task-secret-resolution"
    feature_id: "feature-config-management"
    title: "Implement hierarchical secret resolution"
    description: |
      ## ðŸ©» Summary

      Implement the complex secret resolution logic supporting key, file, and env sources with proper precedence.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Secret resolution follows order: env > file > key
      - [ ] Environment variable lookup works correctly
      - [ ] File-based secret loading is functional
      - [ ] Fallback to direct key value works
      - [ ] Resolution logic is well-tested

      ## ðŸ“¦ Related Material

      - [README.md - Secret configuration](./README.md#complete-configuration-reference)
    priority: 1
    estimate: 3
    labels: ["infrastructure", "security"]

  - id: "task-config-validation"
    feature_id: "feature-config-management"
    title: "Create configuration validation layer"
    description: |
      ## ðŸ©» Summary

      Implement validation to ensure configuration is valid and complete before use.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Required fields are validated at startup
      - [ ] Invalid configuration provides helpful error messages
      - [ ] Default values are applied correctly
      - [ ] Configuration dependencies are checked

      ## ðŸ“¦ Related Material

      - [README.md - Minimal Configuration](./README.md#minimal-configuration)
    priority: 1
    estimate: 1
    labels: ["infrastructure"]

  - id: "task-shared-module"
    feature_id: "feature-core-utilities"
    title: "Create shared utilities module structure"
    description: |
      ## ðŸ©» Summary

      Set up the shared utilities module with proper organization and exports.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Shared utilities module is created
      - [ ] Module structure is logical and well-organized
      - [ ] Common utilities are properly exported
      - [ ] Documentation is clear for utility functions

      ## ðŸ“¦ Related Material

      - [README.md - Shared Utilities](./README.md#shared-utilities)
    priority: 1
    estimate: 1
    labels: ["infrastructure"]

  - id: "task-git-abstraction"
    feature_id: "feature-core-utilities"
    title: "Implement Git abstraction layer"
    description: |
      ## ðŸ©» Summary

      Create unified Git interface supporting both CLI and gix library based on configuration.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Git trait defines common operations
      - [ ] CLI implementation uses git command
      - [ ] Gix implementation uses gix library
      - [ ] Selection based on git.internal config works
      - [ ] Error handling is consistent between implementations

      ## ðŸ“¦ Related Material

      - [README.md - Git Abstraction](./README.md#git-abstraction)
      - [Gix documentation](https://docs.rs/gix/latest/gix/)
    priority: 1
    estimate: 3
    labels: ["infrastructure"]

  - id: "task-logging-strategy"
    feature_id: "feature-core-utilities"
    title: "Implement error handling and logging strategy"
    description: |
      ## ðŸ©» Summary

      Set up consistent error handling and logging using tracing throughout the application.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Tracing is configured with appropriate levels
      - [ ] Logging macros are used consistently
      - [ ] Error handling follows established patterns
      - [ ] Debug information is available when needed

      ## ðŸ“¦ Related Material

      - [Tracing documentation](https://docs.rs/tracing/latest/tracing/)
    priority: 1
    estimate: 1
    labels: ["infrastructure"]

  # Phase 2 Tasks (continued)
  - id: "task-age-decryption"
    feature_id: "feature-crypto-commands"
    title: "Implement age decryption"
    description: |
      ## ðŸ©» Summary

      Implement the decrypt command using age decryption for files and stdin.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] File decryption works correctly
      - [ ] Stdin decryption is functional
      - [ ] Key loading from config works
      - [ ] Binary data handling is proper
      - [ ] Output can go to file or stdout

      ## ðŸ“¦ Related Material

      - [README.md - jig crypto decrypt](./README.md#jig-crypto-decrypt)
      - [Age encryption docs](https://age-encryption.org/)
    priority: 1
    estimate: 3
    labels: ["cli-command", "security"]

  - id: "task-age-encryption"
    feature_id: "feature-crypto-commands"
    title: "Implement age encryption"
    description: |
      ## ðŸ©» Summary

      Implement the encrypt command using age encryption for files and stdin.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] File encryption works correctly
      - [ ] Stdin encryption is functional
      - [ ] Key loading from config works
      - [ ] Binary data handling is proper
      - [ ] Output can go to file or stdout

      ## ðŸ“¦ Related Material

      - [README.md - jig crypto encrypt](./README.md#jig-crypto-encrypt)
      - [Age encryption docs](https://age-encryption.org/)
    priority: 1
    estimate: 3
    labels: ["cli-command", "security"]

  - id: "task-password-generation"
    feature_id: "feature-generate-commands"
    title: "Implement password generation with entropy validation"
    description: |
      ## ðŸ©» Summary

      Create secure password generation with zxcvbn entropy validation and character set requirements.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Password generation uses cryptographically secure random
      - [ ] Character sets are properly implemented
      - [ ] Entropy validation with zxcvbn works
      - [ ] Minimum entropy score of 3 is enforced
      - [ ] Configuration options are respected

      ## ðŸ“¦ Related Material

      - [README.md - jig generate password](./README.md#jig-generate-password)
      - [zxcvbn documentation](https://github.com/dropbox/zxcvbn)
    priority: 1
    estimate: 5
    labels: ["cli-command", "security"]

  - id: "task-template-processing"
    feature_id: "feature-template-system"
    title: "Implement Tera template processing"
    description: |
      ## ðŸ©» Summary

      Set up Tera template processing with context and shared template support.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Tera engine is configured correctly
      - [ ] Template context includes project metadata
      - [ ] Shared templates (_shared) work properly
      - [ ] Template rendering handles errors gracefully
      - [ ] File outputs preserve directory structure

      ## ðŸ“¦ Related Material

      - [README.md - Template system](./README.md#jig-project-template)
      - [Tera documentation](https://tera.netlify.app/)
    priority: 2
    estimate: 5
    labels: ["cli-command", "infrastructure"]

  - id: "task-ai-image-processing"
    feature_id: "feature-ai-utilities"
    title: "Implement prepare_image_for_claude utility"
    description: |
      ## ðŸ©» Summary

      Create image optimization utility for Claude API compatibility with proper resizing and compression.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Images over 2048px are resized correctly
      - [ ] WebP conversion works properly
      - [ ] Compression levels are applied progressively
      - [ ] Final size under 5MB is enforced
      - [ ] Temporary file cleanup works

      ## ðŸ“¦ Related Material

      - [README.md - prepare_image_for_claude](./README.md#prepare_image_for_claude)
    priority: 2
    estimate: 3
    labels: ["ai-powered", "api-integration"]

  - id: "task-workspace-switching"
    feature_id: "feature-workspace-management"
    title: "Implement workspace switching logic"
    description: |
      ## ðŸ©» Summary

      Create complete workspace switching with state transitions, environment management, and hook execution.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] State transition flow works as documented
      - [ ] Environment variables are properly isolated
      - [ ] Hook execution (before-down, down, after-down, before-up, up, after-up) works
      - [ ] Error handling during transitions is robust
      - [ ] Current workspace state is tracked correctly

      ## ðŸ“¦ Related Material

      - [README.md - jig workspace switch](./README.md#jig-workspace-switch)
    priority: 2
    estimate: 8
    labels: ["shell-integration"]

  - id: "task-terminal-effects"
    feature_id: "feature-easter-eggs"
    title: "Integrate terminal effects libraries"
    description: |
      ## ðŸ©» Summary

      Integrate tachyonfx, tui-rain, firework-rs and other effects libraries for the dance command.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] All effects libraries are properly integrated
      - [ ] Animation sequences are smooth and responsive
      - [ ] Terminal cleanup works correctly
      - [ ] Interrupt handling allows clean exit
      - [ ] Multiple animation modes provide variety

      ## ðŸ“¦ Related Material

      - [README.md - Easter Egg Implementation](./README.md#easter-egg-implementation)
    priority: 3
    estimate: 5
    labels: ["cli-command"]

  - id: "task-comprehensive-tests"
    feature_id: "feature-test-suite"
    title: "Write comprehensive unit and integration tests"
    description: |
      ## ðŸ©» Summary

      Create comprehensive test suite covering all major functionality with proper fixtures and mocks.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Unit tests achieve >80% code coverage
      - [ ] Integration tests cover all CLI commands
      - [ ] Property-based tests exist for generation utilities
      - [ ] Test fixtures are well-organized
      - [ ] CI can run all tests reliably

      ## ðŸ“¦ Related Material

      - [PLAN.md - Testing section](./PLAN.md#phase-9-testing-documentation--release)
    priority: 1
    estimate: 8
    labels: ["testing"]

  - id: "task-github-actions"
    feature_id: "feature-ci-cd"
    title: "Configure GitHub Actions workflow"
    description: |
      ## ðŸ©» Summary

      Set up comprehensive GitHub Actions workflow for testing, linting, building, and releasing.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Tests run on push and PR
      - [ ] Rustfmt and clippy checks pass
      - [ ] Cross-platform builds work
      - [ ] Release workflow creates binaries
      - [ ] Code coverage reporting is functional

      ## ðŸ“¦ Related Material

      - [PLAN.md - CI/CD section](./PLAN.md#phase-9-testing-documentation--release)
    priority: 1
    estimate: 5
    labels: ["testing", "infrastructure"]

  - id: "task-readme-review"
    feature_id: "feature-documentation"
    title: "Review and update README for accuracy"
    description: |
      ## ðŸ©» Summary

      Thoroughly review README.md to ensure all information is accurate and up-to-date.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] All command descriptions match implementations
      - [ ] Configuration examples are correct
      - [ ] Installation instructions are tested
      - [ ] Examples work as documented
      - [ ] Links and references are valid

      ## ðŸ“¦ Related Material

      - [README.md](./README.md)
    priority: 1
    estimate: 3
    labels: ["documentation"]

  - id: "task-homebrew-formula"
    feature_id: "feature-distribution"
    title: "Create Homebrew tap formula"
    description: |
      ## ðŸ©» Summary

      Create and test Homebrew formula for easy macOS installation.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Homebrew formula is created
      - [ ] Formula installs correctly from tap
      - [ ] Dependencies are properly specified
      - [ ] Installation is tested on clean system
      - [ ] Formula follows Homebrew guidelines

      ## ðŸ“¦ Related Material

      - [README.md - Installation](./README.md#installation)
      - [Homebrew formula documentation](https://docs.brew.sh/Formula-Cookbook)
    priority: 1
    estimate: 2
    labels: ["infrastructure"]

  # Additional Phase 2 Tasks
  - id: "task-crypto-public-key"
    feature_id: "feature-crypto-commands"
    title: "Implement public key derivation"
    description: |
      ## ðŸ©» Summary

      Implement the `jig crypto public` command to derive public keys from private age keys.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Public command accepts private key input
      - [ ] Age key derivation works correctly
      - [ ] Error handling for invalid private keys
      - [ ] Output formatting is consistent

      ## ðŸ“¦ Related Material

      - [README.md - Crypto commands](./README.md#jig-crypto)
      - [PLAN.md - Crypto implementation](./PLAN.md#phase-2-foundational-command-groups)

      ## ðŸ«§ Further Detail

      Public key derivation is essential for sharing encryption keys securely.
    priority: 1
    estimate: 2
    labels: ["cli-command", "security"]

  - id: "task-crypto-error-handling"
    feature_id: "feature-crypto-commands"
    title: "Add comprehensive error handling for crypto operations"
    description: |
      ## ðŸ©» Summary

      Implement robust error handling across all crypto commands with helpful error messages.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Invalid key errors are user-friendly
      - [ ] File I/O errors are handled gracefully
      - [ ] Corruption detection provides clear messages
      - [ ] All error paths are tested

      ## ðŸ“¦ Related Material

      - [README.md - Crypto commands](./README.md#jig-crypto)
      - [PLAN.md - Error handling strategy](./PLAN.md#phase-1-core-infrastructure--project-setup)

      ## ðŸ«§ Further Detail

      Crypto operations are particularly sensitive to errors and need excellent user guidance.
    priority: 1
    estimate: 2
    labels: ["cli-command", "security"]

  - id: "task-crypto-binary-handling"
    feature_id: "feature-crypto-commands"
    title: "Support binary input/output handling"
    description: |
      ## ðŸ©» Summary

      Ensure crypto commands properly handle binary data without corruption.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Binary files encrypt/decrypt correctly
      - [ ] Stdin/stdout handle binary data
      - [ ] No character encoding issues
      - [ ] Performance is acceptable for large files

      ## ðŸ“¦ Related Material

      - [README.md - Crypto commands](./README.md#jig-crypto)
      - [PLAN.md - Binary handling](./PLAN.md#phase-2-foundational-command-groups)

      ## ðŸ«§ Further Detail

      Binary handling is crucial for encrypting various file types beyond text.
    priority: 1
    estimate: 2
    labels: ["cli-command", "security"]

  - id: "task-hex-generation"
    feature_id: "feature-generate-commands"
    title: "Implement hex generation"
    description: |
      ## ðŸ©» Summary

      Implement the `jig generate hex` command for cryptographically secure hex string generation.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Hex command accepts length parameter
      - [ ] Uses cryptographically secure randomness
      - [ ] Output formatting is consistent
      - [ ] Length validation and error handling

      ## ðŸ“¦ Related Material

      - [README.md - Generate commands](./README.md#jig-generate)
      - [PLAN.md - Generation utilities](./PLAN.md#phase-2-foundational-command-groups)

      ## ðŸ«§ Further Detail

      Hex generation is fundamental for creating secure tokens and identifiers.
    priority: 1
    estimate: 2
    labels: ["cli-command", "security"]

  - id: "task-password-generation"
    feature_id: "feature-generate-commands"
    title: "Implement password generation with entropy validation"
    description: |
      ## ðŸ©» Summary

      Implement the `jig generate password` command with entropy validation using zxcvbn.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Password command generates secure passwords
      - [ ] Entropy validation with zxcvbn integration
      - [ ] Configurable length and character sets
      - [ ] Clear strength feedback to users

      ## ðŸ“¦ Related Material

      - [README.md - Generate commands](./README.md#jig-generate)
      - [PLAN.md - Password generation](./PLAN.md#phase-2-foundational-command-groups)

      ## ðŸ«§ Further Detail

      Password generation must balance security with usability and provide clear strength indicators.
    priority: 1
    estimate: 3
    labels: ["cli-command", "security"]

  - id: "task-xkcd-password-mode"
    feature_id: "feature-generate-commands"
    title: "Implement xkcd password mode"
    description: |
      ## ðŸ©» Summary

      Implement xkcd-style memorable password generation with word lists.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] XKCD mode generates word-based passwords
      - [ ] Word list is comprehensive and appropriate
      - [ ] Configurable word count and separators
      - [ ] Entropy calculation for word-based passwords

      ## ðŸ“¦ Related Material

      - [README.md - Generate commands](./README.md#jig-generate)
      - [PLAN.md - XKCD passwords](./PLAN.md#phase-2-foundational-command-groups)

      ## ðŸ«§ Further Detail

      XKCD passwords provide a good balance of security and memorability.
    priority: 1
    estimate: 3
    labels: ["cli-command", "security"]

  - id: "task-age-key-generation"
    feature_id: "feature-generate-commands"
    title: "Implement age key generation"
    description: |
      ## ðŸ©» Summary

      Implement the `jig generate key crypto` command for age key pair generation.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Crypto key command generates age key pairs
      - [ ] Private and public keys are output correctly
      - [ ] Key format follows age standards
      - [ ] Secure key generation using proper entropy

      ## ðŸ“¦ Related Material

      - [README.md - Generate commands](./README.md#jig-generate)
      - [PLAN.md - Key generation](./PLAN.md#phase-2-foundational-command-groups)

      ## ðŸ«§ Further Detail

      Age key generation is essential for the crypto commands to function properly.
    priority: 1
    estimate: 2
    labels: ["cli-command", "security"]

  - id: "task-wireguard-key-generation"
    feature_id: "feature-generate-commands"
    title: "Implement WireGuard key generation"
    description: |
      ## ðŸ©» Summary

      Implement the `jig generate key wireguard` command for WireGuard key pair generation.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] WireGuard key command generates valid key pairs
      - [ ] Keys are compatible with WireGuard
      - [ ] Output format matches WireGuard conventions
      - [ ] Proper curve25519 key generation

      ## ðŸ“¦ Related Material

      - [README.md - Generate commands](./README.md#jig-generate)
      - [PLAN.md - WireGuard keys](./PLAN.md#phase-2-foundational-command-groups)

      ## ðŸ«§ Further Detail

      WireGuard key generation requires specific cryptographic standards.
    priority: 1
    estimate: 3
    labels: ["cli-command", "security"]

  - id: "task-jwt-generation"
    feature_id: "feature-generate-commands"
    title: "Implement JWT generation with claims"
    description: |
      ## ðŸ©» Summary

      Implement the `jig generate jwt` command with configurable claims, expiry, and secret handling.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] JWT command generates valid tokens
      - [ ] Configurable claims and expiry
      - [ ] Secret handling from configuration
      - [ ] Multiple signing algorithms supported

      ## ðŸ“¦ Related Material

      - [README.md - Generate commands](./README.md#jig-generate)
      - [PLAN.md - JWT generation](./PLAN.md#phase-2-foundational-command-groups)

      ## ðŸ«§ Further Detail

      JWT generation is complex and requires careful handling of claims and signing.
    priority: 1
    estimate: 5
    labels: ["cli-command", "security"]

  - id: "task-deterministic-generation"
    feature_id: "feature-generate-commands"
    title: "Add deterministic generation support with --keyed and --seed options"
    description: |
      ## ðŸ©» Summary

      Add support for deterministic generation using keyed or seeded randomness.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] --keyed option uses configuration secrets
      - [ ] --seed option accepts explicit seeds
      - [ ] Deterministic output is reproducible
      - [ ] Security implications are documented

      ## ðŸ“¦ Related Material

      - [README.md - Generate commands](./README.md#jig-generate)
      - [PLAN.md - Deterministic generation](./PLAN.md#phase-2-foundational-command-groups)

      ## ðŸ«§ Further Detail

      Deterministic generation is useful for testing and reproducible deployments.
    priority: 2
    estimate: 3
    labels: ["cli-command", "security"]

  - id: "task-dns-cache-flush"
    feature_id: "feature-network-commands"
    title: "Implement DNS cache flush (OS-aware)"
    description: |
      ## ðŸ©» Summary

      Implement the `jig network dns flush` command with OS-specific DNS cache flushing.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Flush command works on macOS, Linux, Windows
      - [ ] OS detection and appropriate commands
      - [ ] Proper privilege handling and error messages
      - [ ] Success confirmation feedback

      ## ðŸ“¦ Related Material

      - [README.md - Network commands](./README.md#jig-network)
      - [PLAN.md - DNS operations](./PLAN.md#phase-2-foundational-command-groups)

      ## ðŸ«§ Further Detail

      DNS cache flushing requires different approaches on different operating systems.
    priority: 2
    estimate: 3
    labels: ["cli-command"]

  - id: "task-dns-lookup"
    feature_id: "feature-network-commands"
    title: "Implement DNS lookup with custom servers"
    description: |
      ## ðŸ©» Summary

      Implement the `jig network dns lookup` command with custom DNS server support.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Lookup command performs DNS queries
      - [ ] Custom DNS server specification
      - [ ] Multiple record type support
      - [ ] Timeout handling for queries

      ## ðŸ“¦ Related Material

      - [README.md - Network commands](./README.md#jig-network)
      - [PLAN.md - DNS operations](./PLAN.md#phase-2-foundational-command-groups)

      ## ðŸ«§ Further Detail

      DNS lookup functionality is essential for network diagnostics.
    priority: 2
    estimate: 3
    labels: ["cli-command"]

  - id: "task-dnssec-validation"
    feature_id: "feature-network-commands"
    title: "Implement DNSSEC validation"
    description: |
      ## ðŸ©» Summary

      Implement the `jig network dns sec` command for DNSSEC validation checks.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] DNSSEC validation performs proper checks
      - [ ] Chain of trust verification
      - [ ] Clear validation status reporting
      - [ ] Error handling for validation failures

      ## ðŸ“¦ Related Material

      - [README.md - Network commands](./README.md#jig-network)
      - [PLAN.md - DNSSEC validation](./PLAN.md#phase-2-foundational-command-groups)

      ## ðŸ«§ Further Detail

      DNSSEC validation requires understanding of cryptographic signatures and trust chains.
    priority: 2
    estimate: 4
    labels: ["cli-command", "security"]

  - id: "task-network-timeouts"
    feature_id: "feature-network-commands"
    title: "Add timeout handling for network operations"
    description: |
      ## ðŸ©» Summary

      Implement consistent timeout handling across all network operations.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Configurable timeouts for all network calls
      - [ ] Graceful handling of timeout errors
      - [ ] User feedback for slow operations
      - [ ] Cancellation support where appropriate

      ## ðŸ“¦ Related Material

      - [README.md - Network commands](./README.md#jig-network)
      - [PLAN.md - Network operations](./PLAN.md#phase-2-foundational-command-groups)

      ## ðŸ«§ Further Detail

      Network operations can be unpredictable and need robust timeout handling.
    priority: 2
    estimate: 2
    labels: ["cli-command", "performance"]

  - id: "task-tls-cert-retrieval"
    feature_id: "feature-tls-commands"
    title: "Implement TLS certificate retrieval"
    description: |
      ## ðŸ©» Summary

      Implement the `jig tls cert` command to retrieve and display TLS certificates.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Cert command retrieves certificates from servers
      - [ ] Certificate information is parsed and displayed
      - [ ] Chain validation and trust path analysis
      - [ ] Expiration date and validity checking

      ## ðŸ“¦ Related Material

      - [README.md - TLS commands](./README.md#jig-tls)
      - [PLAN.md - TLS operations](./PLAN.md#phase-2-foundational-command-groups)

      ## ðŸ«§ Further Detail

      TLS certificate analysis is crucial for security diagnostics.
    priority: 2
    estimate: 4
    labels: ["cli-command", "security"]

  - id: "task-tls-cipher-suites"
    feature_id: "feature-tls-commands"
    title: "Implement cipher suite listing"
    description: |
      ## ðŸ©» Summary

      Implement the `jig tls ciphers` command to list supported TLS cipher suites.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Ciphers command lists available cipher suites
      - [ ] Security assessment of cipher strengths
      - [ ] Filtering and sorting options
      - [ ] Clear presentation of cipher information

      ## ðŸ“¦ Related Material

      - [README.md - TLS commands](./README.md#jig-tls)
      - [PLAN.md - TLS operations](./PLAN.md#phase-2-foundational-command-groups)

      ## ðŸ«§ Further Detail

      Cipher suite analysis helps assess TLS configuration security.
    priority: 2
    estimate: 3
    labels: ["cli-command", "security"]

  # Phase 3 Tasks - Project & Git Management
  - id: "task-template-listing"
    feature_id: "feature-template-system"
    title: "Implement template listing"
    description: |
      ## ðŸ©» Summary

      Implement the `jig project template list` command to show available templates.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] List command shows cached templates
      - [ ] Template metadata is displayed clearly
      - [ ] Filtering and search capabilities
      - [ ] Template descriptions are shown

      ## ðŸ“¦ Related Material

      - [README.md - Template commands](./README.md#jig-project-template)
      - [PLAN.md - Template system](./PLAN.md#phase-3-project--git-management)

      ## ðŸ«§ Further Detail

      Template listing helps users discover and choose appropriate project templates.
    priority: 2
    estimate: 2
    labels: ["cli-command"]

  - id: "task-template-updates"
    feature_id: "feature-template-system"
    title: "Implement template repository updates"
    description: |
      ## ðŸ©» Summary

      Implement the `jig project template update` command to refresh template cache.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Update command fetches latest templates
      - [ ] Git repository synchronization
      - [ ] Progress indicators for downloads
      - [ ] Error handling for network issues

      ## ðŸ“¦ Related Material

      - [README.md - Template commands](./README.md#jig-project-template)
      - [PLAN.md - Template updates](./PLAN.md#phase-3-project--git-management)

      ## ðŸ«§ Further Detail

      Template updates ensure users have access to the latest project scaffolding.
    priority: 2
    estimate: 3
    labels: ["cli-command"]

  - id: "task-new-template-creation"
    feature_id: "feature-template-system"
    title: "Implement new template creation"
    description: |
      ## ðŸ©» Summary

      Implement the `jig project template new` command to create empty template structures.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] New command creates template directory structure
      - [ ] .jig.template.yaml file is generated
      - [ ] Template metadata is properly initialized
      - [ ] Documentation for template creators

      ## ðŸ“¦ Related Material

      - [README.md - Template commands](./README.md#jig-project-template)
      - [PLAN.md - Template creation](./PLAN.md#phase-3-project--git-management)

      ## ðŸ«§ Further Detail

      Template creation enables users to contribute back to the template ecosystem.
    priority: 2
    estimate: 3
    labels: ["cli-command"]

  - id: "task-tera-processing"
    feature_id: "feature-template-system"
    title: "Implement Tera template processing"
    description: |
      ## ðŸ©» Summary

      Implement Tera template engine integration for dynamic template processing.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Tera templates are processed correctly
      - [ ] Variable substitution works
      - [ ] Template context includes project metadata
      - [ ] Error handling for template syntax errors

      ## ðŸ“¦ Related Material

      - [README.md - Template system](./README.md#jig-project-template)
      - [PLAN.md - Tera integration](./PLAN.md#phase-3-project--git-management)

      ## ðŸ«§ Further Detail

      Tera processing is the core of the dynamic template system.
    priority: 2
    estimate: 4
    labels: ["cli-command", "infrastructure"]

  - id: "task-shared-template-support"
    feature_id: "feature-template-system"
    title: "Implement _shared template support"
    description: |
      ## ðŸ©» Summary

      Implement support for _shared template components across templates.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] _shared directory is recognized
      - [ ] Shared components can be included
      - [ ] Template inheritance works correctly
      - [ ] Documentation for shared components

      ## ðŸ“¦ Related Material

      - [README.md - Template system](./README.md#jig-project-template)
      - [PLAN.md - Shared templates](./PLAN.md#phase-3-project--git-management)

      ## ðŸ«§ Further Detail

      Shared templates reduce duplication and improve maintainability.
    priority: 2
    estimate: 3
    labels: ["cli-command"]

  - id: "task-project-scaffolding"
    feature_id: "feature-project-commands"
    title: "Implement project scaffolding from templates"
    description: |
      ## ðŸ©» Summary

      Implement the `jig project new` command to create projects from templates.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] New command creates projects from templates
      - [ ] User prompts for template variables
      - [ ] Directory structure is created correctly
      - [ ] .jig.yaml tracking file is generated

      ## ðŸ“¦ Related Material

      - [README.md - Project commands](./README.md#jig-project)
      - [PLAN.md - Project scaffolding](./PLAN.md#phase-3-project--git-management)

      ## ðŸ«§ Further Detail

      Project scaffolding is a core feature that provides immediate value to users.
    priority: 2
    estimate: 5
    labels: ["cli-command"]

  - id: "task-project-updates"
    feature_id: "feature-project-commands"
    title: "Implement project update with diff display"
    description: |
      ## ðŸ©» Summary

      Implement the `jig project update` command to apply template updates to existing projects.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Update command applies template changes
      - [ ] Diff display shows changes before applying
      - [ ] User confirmation for destructive changes
      - [ ] Backup creation for safety

      ## ðŸ“¦ Related Material

      - [README.md - Project commands](./README.md#jig-project)
      - [PLAN.md - Project updates](./PLAN.md#phase-3-project--git-management)

      ## ðŸ«§ Further Detail

      Project updates help maintain consistency as templates evolve.
    priority: 2
    estimate: 4
    labels: ["cli-command"]

  - id: "task-jig-yaml-tracking"
    feature_id: "feature-project-commands"
    title: "Implement .jig.yaml tracking file"
    description: |
      ## ðŸ©» Summary

      Implement .jig.yaml file creation and management for project tracking.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] .jig.yaml file is created with projects
      - [ ] Template source and version are tracked
      - [ ] Project metadata is maintained
      - [ ] Update compatibility checking

      ## ðŸ“¦ Related Material

      - [README.md - Project tracking](./README.md#jig-project)
      - [PLAN.md - Project tracking](./PLAN.md#phase-3-project--git-management)

      ## ðŸ«§ Further Detail

      The tracking file enables intelligent project updates and maintenance.
    priority: 2
    estimate: 2
    labels: ["cli-command", "infrastructure"]

  - id: "task-dependabot-generation"
    feature_id: "feature-project-commands"
    title: "Implement dependabot.yml generation"
    description: |
      ## ðŸ©» Summary

      Implement the `jig project dependabot` command to generate .github/dependabot.yml files.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Dependabot command detects project ecosystems
      - [ ] Appropriate dependabot.yml is generated
      - [ ] Configuration is customizable
      - [ ] Multiple ecosystem support

      ## ðŸ“¦ Related Material

      - [README.md - Project commands](./README.md#jig-project)
      - [PLAN.md - Dependabot generation](./PLAN.md#phase-3-project--git-management)

      ## ðŸ«§ Further Detail

      Automated dependency management improves project maintenance.
    priority: 2
    estimate: 3
    labels: ["cli-command"]

  - id: "task-dependency-bumping"
    feature_id: "feature-project-commands"
    title: "Implement dependency version bumping"
    description: |
      ## ðŸ©» Summary

      Implement the `jig project bump` command for dependency version updates.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Bump command updates Cargo.toml dependencies
      - [ ] package.json dependency updates
      - [ ] GitHub Actions version updates
      - [ ] Semantic version handling

      ## ðŸ“¦ Related Material

      - [README.md - Project commands](./README.md#jig-project)
      - [PLAN.md - Dependency bumping](./PLAN.md#phase-3-project--git-management)

      ## ðŸ«§ Further Detail

      Dependency bumping helps maintain secure and up-to-date projects.
    priority: 2
    estimate: 4
    labels: ["cli-command"]

  - id: "task-project-tera-context"
    feature_id: "feature-project-commands"
    title: "Add Tera template context with project metadata"
    description: |
      ## ðŸ©» Summary

      Implement rich template context for Tera processing with project metadata.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Project metadata is available in templates
      - [ ] User information is included in context
      - [ ] Git repository information is accessible
      - [ ] Environment variables can be referenced

      ## ðŸ“¦ Related Material

      - [README.md - Template system](./README.md#jig-project)
      - [PLAN.md - Template context](./PLAN.md#phase-3-project--git-management)

      ## ðŸ«§ Further Detail

      Rich template context enables more sophisticated template processing.
    priority: 2
    estimate: 3
    labels: ["cli-command", "infrastructure"]

  - id: "task-simplified-clone"
    feature_id: "feature-git-integration"
    title: "Implement simplified clone (username/repo)"
    description: |
      ## ðŸ©» Summary

      Implement the `jig git clone` command for simplified GitHub repository cloning.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Clone command accepts username/repo format
      - [ ] GitHub URL construction works correctly
      - [ ] SSH and HTTPS protocol support
      - [ ] Error handling for invalid repositories

      ## ðŸ“¦ Related Material

      - [README.md - Git commands](./README.md#jig-git)
      - [PLAN.md - Git integration](./PLAN.md#phase-3-project--git-management)

      ## ðŸ«§ Further Detail

      Simplified cloning reduces friction for common GitHub workflows.
    priority: 2
    estimate: 3
    labels: ["cli-command"]

  - id: "task-latest-commit-hash"
    feature_id: "feature-git-integration"
    title: "Implement latest commit hash retrieval"
    description: |
      ## ðŸ©» Summary

      Implement the `jig git latest` command to get latest commit hash from GitHub.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Latest command queries GitHub API
      - [ ] Branch specification support
      - [ ] Commit hash is returned correctly
      - [ ] Error handling for non-existent branches

      ## ðŸ“¦ Related Material

      - [README.md - Git commands](./README.md#jig-git)
      - [PLAN.md - Git latest](./PLAN.md#phase-3-project--git-management)

      ## ðŸ«§ Further Detail

      Latest commit retrieval is useful for CI/CD and deployment workflows.
    priority: 2
    estimate: 2
    labels: ["cli-command", "api-integration"]

  - id: "task-github-secrets-management"
    feature_id: "feature-git-integration"
    title: "Implement GitHub secrets management"
    description: |
      ## ðŸ©» Summary

      Implement the `jig git secret` command for managing GitHub Actions secrets.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Secret command manages repository secrets
      - [ ] Create, update, delete operations
      - [ ] Environment secret support
      - [ ] Proper encryption handling

      ## ðŸ“¦ Related Material

      - [README.md - Git commands](./README.md#jig-git)
      - [PLAN.md - GitHub secrets](./PLAN.md#phase-3-project--git-management)

      ## ðŸ«§ Further Detail

      Secrets management enables secure CI/CD configuration.
    priority: 2
    estimate: 4
    labels: ["cli-command", "api-integration", "security"]

  - id: "task-batch-repo-update"
    feature_id: "feature-git-integration"
    title: "Implement batch repo update (yank)"
    description: |
      ## ðŸ©» Summary

      Implement the `jig git yank` command for batch fetch/pull operations.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Yank command processes all repos in directory
      - [ ] Fetch and pull operations for each repo
      - [ ] Progress indicators for batch operations
      - [ ] Error handling for individual repo failures

      ## ðŸ“¦ Related Material

      - [README.md - Git commands](./README.md#jig-git)
      - [PLAN.md - Batch operations](./PLAN.md#phase-3-project--git-management)

      ## ðŸ«§ Further Detail

      Batch operations save time when working with multiple repositories.
    priority: 2
    estimate: 3
    labels: ["cli-command"]

  - id: "task-git-progress-indicators"
    feature_id: "feature-git-integration"
    title: "Add progress indicators for long operations"
    description: |
      ## ðŸ©» Summary

      Implement progress indicators for long-running Git operations.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Progress bars for clone operations
      - [ ] Status indicators for batch operations
      - [ ] Time estimates where possible
      - [ ] Cancellation support

      ## ðŸ“¦ Related Material

      - [README.md - Git commands](./README.md#jig-git)
      - [PLAN.md - Progress indicators](./PLAN.md#phase-3-project--git-management)

      ## ðŸ«§ Further Detail

      Progress indicators improve user experience for long operations.
    priority: 2
    estimate: 2
    labels: ["cli-command", "performance"]

  - id: "task-binary-metadata-storage"
    feature_id: "feature-binary-management"
    title: "Implement binary metadata storage"
    description: |
      ## ðŸ©» Summary

      Implement metadata storage in ~/.local/share/jig/binaries.yaml for tracking installed binaries.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Metadata file structure is defined
      - [ ] Binary information is stored correctly
      - [ ] Version tracking works
      - [ ] Installation source is recorded

      ## ðŸ“¦ Related Material

      - [README.md - Binary management](./README.md#jig-git-binary)
      - [PLAN.md - Binary management](./PLAN.md#phase-3-project--git-management)

      ## ðŸ«§ Further Detail

      Metadata storage enables intelligent binary management and updates.
    priority: 2
    estimate: 2
    labels: ["cli-command", "infrastructure"]

  - id: "task-github-release-downloading"
    feature_id: "feature-binary-management"
    title: "Implement GitHub release downloading"
    description: |
      ## ðŸ©» Summary

      Implement the `jig git binary get` command to download and install binaries from GitHub releases.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Get command downloads release assets
      - [ ] Architecture detection and selection
      - [ ] Binary extraction and installation
      - [ ] Checksum verification where available

      ## ðŸ“¦ Related Material

      - [README.md - Binary management](./README.md#jig-git-binary)
      - [PLAN.md - Binary downloading](./PLAN.md#phase-3-project--git-management)

      ## ðŸ«§ Further Detail

      Binary downloading automates tool installation from GitHub releases.
    priority: 2
    estimate: 4
    labels: ["cli-command", "api-integration"]

  - id: "task-binary-installation"
    feature_id: "feature-binary-management"
    title: "Implement binary installation and PATH management"
    description: |
      ## ðŸ©» Summary

      Implement binary installation logic with proper PATH management.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Binaries are installed to appropriate location
      - [ ] PATH updates are handled correctly
      - [ ] Permissions are set properly
      - [ ] Shell integration works

      ## ðŸ“¦ Related Material

      - [README.md - Binary management](./README.md#jig-git-binary)
      - [PLAN.md - Binary installation](./PLAN.md#phase-3-project--git-management)

      ## ðŸ«§ Further Detail

      Proper installation ensures binaries are immediately available for use.
    priority: 2
    estimate: 3
    labels: ["cli-command", "shell-integration"]

  - id: "task-binary-show"
    feature_id: "feature-binary-management"
    title: "Implement binary information display"
    description: |
      ## ðŸ©» Summary

      Implement the `jig git binary show` command to display information about installed binaries.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Show command displays binary details
      - [ ] Version information is shown
      - [ ] Installation date and source
      - [ ] Update availability checking

      ## ðŸ“¦ Related Material

      - [README.md - Binary management](./README.md#jig-git-binary)
      - [PLAN.md - Binary information](./PLAN.md#phase-3-project--git-management)

      ## ðŸ«§ Further Detail

      Binary information helps users manage their installed tools.
    priority: 2
    estimate: 2
    labels: ["cli-command"]

  - id: "task-binary-updates"
    feature_id: "feature-binary-management"
    title: "Implement binary updates and removal"
    description: |
      ## ðŸ©» Summary

      Implement the `jig git binary update` and `remove` commands for binary management.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] Update command upgrades binaries to latest versions
      - [ ] Remove command uninstalls binaries cleanly
      - [ ] Metadata cleanup on removal
      - [ ] Batch update operations

      ## ðŸ“¦ Related Material

      - [README.md - Binary management](./README.md#jig-git-binary)
      - [PLAN.md - Binary updates](./PLAN.md#phase-3-project--git-management)

      ## ðŸ«§ Further Detail

      Update and removal capabilities complete the binary management lifecycle.
    priority: 2
    estimate: 3
    labels: ["cli-command"]

  - id: "task-architecture-detection"
    feature_id: "feature-binary-management"
    title: "Add architecture detection and binary selection logic"
    description: |
      ## ðŸ©» Summary

      Implement architecture detection and intelligent binary asset selection.

      ## ðŸ§µ It's Done Whenâ€¦

      - [ ] System architecture is detected correctly
      - [ ] Release assets are filtered by architecture
      - [ ] Naming pattern recognition works
      - [ ] Fallback strategies for edge cases

      ## ðŸ“¦ Related Material

      - [README.md - Binary management](./README.md#jig-git-binary)
      - [PLAN.md - Architecture detection](./PLAN.md#phase-3-project--git-management)

      ## ðŸ«§ Further Detail

      Accurate architecture detection ensures compatible binary downloads.
    priority: 2
    estimate: 3
    labels: ["cli-command", "infrastructure"]
