name: container
on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+*"
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: jig
jobs:
  build-binaries:
    name: Build binaries for container
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            platform: linux/amd64
          - target: aarch64-unknown-linux-gnu
            platform: linux/arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation dependencies
        run: |
          sudo apt-get update
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
          fi

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: container-${{ matrix.target }}

      - name: Build release binary
        run: |
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
            export CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc
            export CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++
            export AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar
          fi
          cargo build --release --target ${{ matrix.target }}

      - name: Prepare binary for Docker
        run: |
          mkdir -p docker-context/${{ matrix.target }}
          cp "target/${{ matrix.target }}/release/jig" "docker-context/${{ matrix.target }}/jig"

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.target }}
          path: docker-context/${{ matrix.target }}/jig
          retention-days: 1

  build-container:
    name: Build container images
    needs: build-binaries
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.metadata.outputs.tags }}
      digest: ${{ steps.build.outputs.digest }}
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    env:
      DOCKER_BUILDKIT: 1
    steps:
      - name: checkout
        id: checkout
        uses: actions/checkout@85e6279cec87321a52edac9c87bce653a07cf6c2

      - name: Download all binaries
        uses: actions/download-artifact@v4
        with:
          pattern: binary-*
          path: docker-context
          merge-multiple: false

      - name: Inspect downloaded binaries
        run: |
          echo "Downloaded binaries:"
          find docker-context -type f -name "jig" -exec ls -la {} \;
          # Make binaries executable
          find docker-context -type f -name "jig" -exec chmod +x {} \;
      - name: buildx
        id: buildx
        uses: docker/setup-buildx-action@3f1544eb9eff0b4d4d279b33f704a06fcf8d0e43
        with:
          driver-opts: |
            network=host
            image=moby/buildkit:buildx-stable-1
          buildkitd-config-inline: |
            [worker.oci]
              max-parallelism = 4
            [worker.containerd]
              max-parallelism = 4
      - name: login
        id: login
        uses: docker/login-action@6d4b68b490aef8836e8fb5e50ee7b3bdfa5894f0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: metadata
        id: metadata
        run: |
          # Get the version from the tag
          VERSION=${GITHUB_REF_NAME}
          {
            echo "tags<<EOF"
            echo "${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest"
            echo "${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${VERSION}"
            echo "EOF"
            echo "labels<<EOF"
            echo "org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}"
            echo "org.opencontainers.image.revision=${{ github.sha }}"
            echo "org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
            echo "org.opencontainers.image.title=${{ env.IMAGE_NAME }}"
            echo "org.opencontainers.image.description=jig CLI"
            echo "org.opencontainers.image.version=${VERSION}"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"
      - name: build
        id: build
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83
        with:
          context: .
          push: true
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          provenance: mode=max
          sbom: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: generate-artifact-attestation
        uses: actions/attest-build-provenance@39cb715ce0ddd23df1f705e863f642bfb72dfb2b
        with:
          subject-name: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true
      - name: summary
        id: summary
        run: |
          # Get the version from the tag
          VERSION=${GITHUB_REF_NAME}
          echo "Multi-arch images created using prebuilt binaries:"
          echo "  - ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest"
          echo "  - ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${VERSION}"
          echo "Platforms: linux/amd64, linux/arm64"
          echo "Digest: ${{ steps.build.outputs.digest }}"
