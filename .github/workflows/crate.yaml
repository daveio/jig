name: crate
on:
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+*
env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
permissions:
  contents: read
  id-token: write
jobs:
  verify-builds:
    name: Verify Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux targets
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-24.04
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-24.04
          # macOS targets
          - target: x86_64-apple-darwin
            os: macos-15
          - target: aarch64-apple-darwin
            os: macos-15
          # Windows targets (commented out - build currently fails)
          # - target: x86_64-pc-windows-msvc
          #   os: windows-2025
          # - target: aarch64-pc-windows-msvc
          #   os: windows-2025
    steps:
      - name: Checkout
        uses: actions/checkout@09d2acae674a48949e3602304ab46fd20ae0c42f

      - name: Extract version from tag
        run: |
          VERSION=${GITHUB_REF_NAME#v}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
        shell: bash

      - name: Validate Cargo.toml for publishing
        run: |
          # Check that version matches the tag
          CARGO_VERSION=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          if [[ "$CARGO_VERSION" != "$VERSION" ]]; then
            echo "❌ Version mismatch: Cargo.toml has '$CARGO_VERSION' but tag is '$VERSION'"
            echo "Please update Cargo.toml version to match the tag"
            exit 1
          fi

          # Check that publish is enabled
          if ! grep -q '^publish = true' Cargo.toml; then
            echo "❌ publish = true not found in Cargo.toml"
            echo "Please set publish = true in Cargo.toml"
            exit 1
          fi

          echo "✅ Cargo.toml validation successful:"
          echo "  Version: $CARGO_VERSION"
          echo "  Publish: enabled"
        shell: bash

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation dependencies (Linux)
        if: matrix.os == 'ubuntu-24.04'
        run: |
          sudo apt-get update
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
          fi

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@7e1e2d0a10862b34e5df481373b2b0f295d1a2ef
        with:
          shared-key: release-${{ matrix.target }}

      - name: Verify build
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-24.04" ]]; then
            if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
              export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
              export CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc
              export CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++
              export AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar
            fi
          fi
          cargo check --release --target ${{ matrix.target }}
        shell: bash

  publish:
    name: Publish to crates.io
    needs: verify-builds
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@09d2acae674a48949e3602304ab46fd20ae0c42f

      - name: Extract version from tag
        run: |
          VERSION=${GITHUB_REF_NAME#v}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Publishing version: $VERSION"

      - name: Validate Cargo.toml for publishing
        run: |
          # Check that version matches the tag
          CARGO_VERSION=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          if [[ "$CARGO_VERSION" != "$VERSION" ]]; then
            echo "❌ Version mismatch: Cargo.toml has '$CARGO_VERSION' but tag is '$VERSION'"
            echo "Please update Cargo.toml version to match the tag before creating the release"
            exit 1
          fi

          # Check that publish is enabled
          if ! grep -q '^publish = true' Cargo.toml; then
            echo "❌ publish = true not found in Cargo.toml"
            echo "Please set publish = true in Cargo.toml before creating the release"
            exit 1
          fi

          echo "✅ Cargo.toml validation successful:"
          echo "  Version: $CARGO_VERSION"
          echo "  Publish: enabled"

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@7e1e2d0a10862b34e5df481373b2b0f295d1a2ef
        with:
          shared-key: crate

      - name: Verify package
        run: |
          echo "📦 Verifying package contents..."
          cargo package --list
          echo "📦 Creating package..."
          if ! cargo package --no-verify; then
            echo "❌ Failed to create package"
            exit 1
          fi
          echo "✅ Package verification successful"

      - name: Publish to crates.io
        run: |
          echo "Publishing jig-cli version $VERSION to crates.io..."
          cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: Verify publication
        run: |
          echo "Waiting for package to be available..."
          sleep 30

          # Attempt to fetch the published package
          for i in {1..5}; do
            if cargo search jig-cli | grep -q "$VERSION"; then
              echo "✅ Package jig-cli $VERSION successfully published and available on crates.io"
              exit 0
            fi
            echo "Attempt $i: Package not yet available, waiting..."
            sleep 30
          done

          echo "⚠️  Package may still be propagating through crates.io"

      - name: Workflow summary
        if: always()
        run: |
          echo "## 📋 Publish Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** \`$VERSION\`" >> $GITHUB_STEP_SUMMARY
          echo "**Package:** \`jig-cli\`" >> $GITHUB_STEP_SUMMARY
          echo "**Tag:** \`$GITHUB_REF_NAME\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ job.status }}" == "success" ]]; then
            echo "✅ **Status:** Successfully published to crates.io" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🚀 Installation" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
            echo "cargo install jig-cli" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔗 Links" >> $GITHUB_STEP_SUMMARY
            echo "- [crates.io](https://crates.io/crates/jig-cli)" >> $GITHUB_STEP_SUMMARY
            echo "- [docs.rs](https://docs.rs/jig-cli)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Status:** Publication failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Check the workflow logs for details." >> $GITHUB_STEP_SUMMARY
          fi
