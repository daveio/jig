name: release
on:
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+*
env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
permissions:
  contents: write
  id-token: write
  attestations: write
jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux targets
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-24.04
            binary_name: jig
            archive_name: jig-x86_64-linux
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-24.04
            binary_name: jig
            archive_name: jig-aarch64-linux
          # macOS targets
          - target: x86_64-apple-darwin
            os: macos-15
            binary_name: jig
            archive_name: jig-x86_64-macos
          - target: aarch64-apple-darwin
            os: macos-15
            binary_name: jig
            archive_name: jig-aarch64-macos
          # Windows targets disabled due to build failure
          # - target: x86_64-pc-windows-msvc
          #   os: windows-2025
          #   binary_name: jig.exe
          #   archive_name: jig-x86_64-windows
          # - target: aarch64-pc-windows-msvc
          #   os: windows-2025
          #   binary_name: jig.exe
          #   archive_name: jig-aarch64-windows
    steps:
      - name: Checkout
        uses: actions/checkout@8edcb1bdb4e267140fa742c62e395cd74f332709

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation dependencies (Linux)
        if: matrix.os == 'ubuntu-24.04'
        run: |
          sudo apt-get update
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
          fi

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@f13886b937689c021905a6b90929199931d60db1
        with:
          env-vars: ""
          prefix-key: rust
          shared-key: release-${{ matrix.target }}

      - name: Build release binary
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-24.04" ]]; then
            if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
              export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
              export CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc
              export CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++
              export AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar
            fi
          fi
          cargo build --release --target ${{ matrix.target }}
        shell: bash

      - name: Prepare binary
        run: |
          mkdir -p artifacts
          if [[ "${{ matrix.os }}" == "windows-2025" ]]; then
            cp "target/${{ matrix.target }}/release/${{ matrix.binary_name }}" "artifacts/${{ matrix.archive_name }}.exe"
          else
            cp "target/${{ matrix.target }}/release/${{ matrix.binary_name }}" "artifacts/${{ matrix.archive_name }}"
          fi
        shell: bash

      - name: Install zstd
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-24.04" ]]; then
            sudo apt-get install -y zstd
          elif [[ "${{ matrix.os }}" == "macos-15" ]]; then
            brew install zstd
          elif [[ "${{ matrix.os }}" == "windows-2025" ]]; then
            choco install zstandard -y
          fi
        shell: bash

      - name: Compress binary with zstd
        run: |
          cd artifacts
          if [[ "${{ matrix.os }}" == "windows-2025" ]]; then
            zstd -9 "${{ matrix.archive_name }}.exe" -o "${{ matrix.archive_name }}.exe.zst"
          else
            zstd -9 "${{ matrix.archive_name }}" -o "${{ matrix.archive_name }}.zst"
          fi
        shell: bash

      - name: Generate checksums
        run: |
          cd artifacts
          if [[ "${{ matrix.os }}" == "windows-2025" ]]; then
            sha256sum "${{ matrix.archive_name }}.exe" > "${{ matrix.archive_name }}.exe.sha256"
            sha256sum "${{ matrix.archive_name }}.exe.zst" > "${{ matrix.archive_name }}.exe.zst.sha256"
          else
            if [[ "${{ matrix.os }}" == "macos-15" ]]; then
              shasum -a 256 "${{ matrix.archive_name }}" > "${{ matrix.archive_name }}.sha256"
              shasum -a 256 "${{ matrix.archive_name }}.zst" > "${{ matrix.archive_name }}.zst.sha256"
            else
              sha256sum "${{ matrix.archive_name }}" > "${{ matrix.archive_name }}.sha256"
              sha256sum "${{ matrix.archive_name }}.zst" > "${{ matrix.archive_name }}.zst.sha256"
            fi
          fi
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@2848b2cda0e5190984587ec6bb1f36730ca78d50
        with:
          name: binaries-${{ matrix.target }}
          path: artifacts/*
          retention-days: 1

      - name: Generate attestation
        uses: actions/attest-build-provenance@3752c92e3bd95a40782ebef53ea5f91088c20e48
        with:
          subject-path: artifacts/${{ matrix.archive_name }}${{ matrix.os == 'windows-2025' && '.exe' || '' }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@8edcb1bdb4e267140fa742c62e395cd74f332709

      - name: Download all artifacts
        uses: actions/download-artifact@4a24838f3d5601fd639834081e118c2995d51e1c
        with:
          path: artifacts
          pattern: binaries-*
          merge-multiple: true

      - name: Create checksums file
        run: |
          cd artifacts
          cat *.sha256 > checksums.txt

          # Create release notes with Docker information
          echo "## Installation" >> RELEASE-NOTES.md
          echo "" >> RELEASE-NOTES.md
          echo "### Cargo Install" >> RELEASE-NOTES.md
          echo "You can install jig directly from crates.io using cargo:" >> RELEASE-NOTES.md
          echo '```bash' >> RELEASE-NOTES.md
          echo "cargo install jig-cli" >> RELEASE-NOTES.md
          echo '```' >> RELEASE-NOTES.md
          echo "" >> RELEASE-NOTES.md
          echo "### Binary Downloads" >> RELEASE-NOTES.md
          echo "Download the appropriate binary for your platform from the assets below." >> RELEASE-NOTES.md
          echo "" >> RELEASE-NOTES.md
          echo "### Docker" >> RELEASE-NOTES.md
          echo "You can also run jig using Docker:" >> RELEASE-NOTES.md
          echo '```bash' >> RELEASE-NOTES.md
          echo "# Using the latest version" >> RELEASE-NOTES.md
          echo "docker run --rm -it ghcr.io/${{ github.repository_owner }}/jig:latest" >> RELEASE-NOTES.md
          echo "" >> RELEASE-NOTES.md
          echo "# Using this specific version" >> RELEASE-NOTES.md
          echo "docker run --rm -it ghcr.io/${{ github.repository_owner }}/jig:${GITHUB_REF_NAME#v}" >> RELEASE-NOTES.md
          echo '```' >> RELEASE-NOTES.md
          echo "" >> RELEASE-NOTES.md
          echo "### Checksums" >> RELEASE-NOTES.md
          echo '```' >> RELEASE-NOTES.md
          cat checksums.txt >> RELEASE-NOTES.md
          echo '```' >> RELEASE-NOTES.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@62c96d0c4e8a889135c1f3a25910db8dbe0e85f7
        with:
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}
          generate_release_notes: true
          files: |
            artifacts/*
          body_path: artifacts/RELEASE-NOTES.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
