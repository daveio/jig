---
description:
globs:
alwaysApply: true
---
# Project Rules

## Commands

### Development Commands

- **Build**: `cargo build` or `cargo build --release`
- **Run**: `cargo run` or `cargo run --release`
- **Test**: `cargo test`
- **Lint**: `cargo clippy`
- **Format**: `cargo fmt`
- **Check**: `cargo check`

### Run Single Test

```bash
cargo test test_name
cargo test module_name::test_name
```

### Development with Live Reload

```bash
cargo watch -x run
```

## Architecture Overview

### Project Type

`jig` is a comprehensive CLI toolbox built in Rust that consolidates various utilities into a unified command-line interface. It follows a modular, command-group architecture with extensive use of external APIs and local configuration management.

### Core Architecture Patterns

**Command Structure**: Uses `clap` with nested subcommands following the pattern `jig <group> <subcommand>`. The main command groups are:

- `crypto` - Age encryption/decryption
- `generate` - Cryptographically secure generation (passwords, keys, JWT)
- `api` - Integration with dave.io API services
- `git` - Git/GitHub utilities including binary management
- `project` - Project scaffolding and template management
- `network/tls` - Network diagnostics and TLS utilities
- `domain` - Domain management via external APIs
- `workspace` - Environment management with shell integration
- `terminal` - Visual terminal utilities
- `ai` - AI-powered automation features

**Configuration System**:

- Primary config: `~/.jig.yaml`
- Secrets config: `~/.jig.secret.yaml` (optional)
- Uses `saphyr` + `serde` for YAML processing
- Hierarchical secret resolution supporting key/file/env sources
- Template system using Tera for project scaffolding

**Git Abstraction**: Unified interface supporting both `git` CLI and `gix` library based on `git.internal` config setting.

### Key Dependencies & Their Roles

**Core Framework:**

- `clap` - CLI argument parsing with command abbreviation support
- `saphyr`/`serde` - YAML configuration management
- `tokio` - Async runtime for network operations

**Cryptography & Security:**

- `age` - File encryption/decryption
- `jwt-simple` - JWT token generation
- `blake3`/`sha2` - Hashing utilities
- `argon2` - Key derivation for deterministic generation

**External Integrations:**

- `reqwest` - HTTP client for API calls
- `octocrab` - GitHub API integration
- `anthropic-ai-sdk` - Claude AI integration
- `icann-rdap-client` - Domain information queries

**Terminal & Visual:**

- `ratatui` - Terminal UI framework
- `viuer` - Terminal image display
- `spinoff` - Loading indicators
- `tachyonfx`/`tui-rain`/`firework-rs` - Terminal effects for easter eggs

**Project Management:**

- `tera` - Template engine for project scaffolding
- `gix` - Pure Rust Git implementation

### File Structure Patterns

**Configuration Storage:**

- User config: `~/.jig.yaml`
- Secrets: `~/.jig.secret.yaml`
- Binary metadata: `~/.local/share/jig/binaries.yaml`
- Installed binaries: `~/.local/share/jig/bin/`
- Templates: `~/.local/share/jig/templates/`

**Project Tracking:**

- `.jig.yaml` - Created in projects to track template metadata
- `.jig.template.yaml` - Template configuration in template directories

### Key Architectural Decisions

**Encryption**: Uses `age` encryption standard for all crypto operations, with consistent key hierarchy and fallback logic.

**Shell Integration**: Designed for deep shell integration with workspace management, environment variable isolation, and PATH management via shell hooks.

**Template System**: Uses Tera templates with shared components (`_shared` directory) and metadata tracking for project updates.

**AI Integration**: Centralizes AI operations through `ask_claude` utility with image preprocessing via `prepare_image_for_claude`.

**Binary Management**: Custom GitHub release management system with hash-based update detection and metadata tracking.

**Error Handling**: Uses structured error propagation with user-friendly error messages and proper exit codes.

## Development Notes

### Adding New Commands

- Commands are organized by logical groups (crypto, generate, api, etc.)
- Each command should support global options: `--json`, `--verbose`, `--quiet`, `--silent`
- Use `clap` derive macros for argument parsing
- Follow the pattern of loading configuration hierarchically

### Configuration Patterns

- Use the established secret resolution pattern (env > file > config)
- Support both global and command-specific configuration sections
- Validate configuration early and provide clear error messages

### External API Integration

- Always implement retry logic and proper error handling
- Support offline modes where possible
- Use structured output for JSON mode
- Include rate limiting considerations for AI features

### Testing Strategy

- Unit tests for core logic (crypto, generation utilities)
- Integration tests for CLI command execution
- Property-based testing for generation functions
- Mock external APIs in tests where appropriate

## Implementation Status

This project is in early development. The main.rs currently contains only a placeholder. The comprehensive README.md outlines a detailed 9-phase implementation plan starting with core infrastructure, then foundational commands, project management, API integration, AI features, shell integration, polish, and finally testing/documentation.

The phased approach ensures logical dependency management and incremental value delivery, with parallel development possible for independent command groups.
